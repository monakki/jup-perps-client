/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  getU64Decoder,
  getU64Encoder,
  transformEncoder,
  type AccountMeta,
  type AccountSignerMeta,
  type Address,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
  type Instruction,
  type InstructionWithAccounts,
  type InstructionWithData,
  type ReadonlyAccount,
  type ReadonlySignerAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
} from '@solana/kit'
import { PERPETUALS_PROGRAM_ADDRESS } from '../programs'
import { getAccountMetaFactory, type ResolvedAccount } from '../shared'

export const SWAP2_DISCRIMINATOR = new Uint8Array([
  65, 75, 63, 76, 235, 91, 91, 136,
])

export function getSwap2DiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(SWAP2_DISCRIMINATOR)
}

export type Swap2Instruction<
  TProgram extends string = typeof PERPETUALS_PROGRAM_ADDRESS,
  TAccountOwner extends string | AccountMeta<string> = string,
  TAccountFundingAccount extends string | AccountMeta<string> = string,
  TAccountReceivingAccount extends string | AccountMeta<string> = string,
  TAccountTransferAuthority extends string | AccountMeta<string> = string,
  TAccountPerpetuals extends string | AccountMeta<string> = string,
  TAccountPool extends string | AccountMeta<string> = string,
  TAccountReceivingCustody extends string | AccountMeta<string> = string,
  TAccountReceivingCustodyDovesPriceAccount extends
    | string
    | AccountMeta<string> = string,
  TAccountReceivingCustodyPythnetPriceAccount extends
    | string
    | AccountMeta<string> = string,
  TAccountReceivingCustodyTokenAccount extends
    | string
    | AccountMeta<string> = string,
  TAccountDispensingCustody extends string | AccountMeta<string> = string,
  TAccountDispensingCustodyDovesPriceAccount extends
    | string
    | AccountMeta<string> = string,
  TAccountDispensingCustodyPythnetPriceAccount extends
    | string
    | AccountMeta<string> = string,
  TAccountDispensingCustodyTokenAccount extends
    | string
    | AccountMeta<string> = string,
  TAccountTokenProgram extends
    | string
    | AccountMeta<string> = 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA',
  TAccountEventAuthority extends string | AccountMeta<string> = string,
  TAccountProgram extends string | AccountMeta<string> = string,
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountOwner extends string
        ? ReadonlySignerAccount<TAccountOwner> &
            AccountSignerMeta<TAccountOwner>
        : TAccountOwner,
      TAccountFundingAccount extends string
        ? WritableAccount<TAccountFundingAccount>
        : TAccountFundingAccount,
      TAccountReceivingAccount extends string
        ? WritableAccount<TAccountReceivingAccount>
        : TAccountReceivingAccount,
      TAccountTransferAuthority extends string
        ? ReadonlyAccount<TAccountTransferAuthority>
        : TAccountTransferAuthority,
      TAccountPerpetuals extends string
        ? ReadonlyAccount<TAccountPerpetuals>
        : TAccountPerpetuals,
      TAccountPool extends string
        ? WritableAccount<TAccountPool>
        : TAccountPool,
      TAccountReceivingCustody extends string
        ? WritableAccount<TAccountReceivingCustody>
        : TAccountReceivingCustody,
      TAccountReceivingCustodyDovesPriceAccount extends string
        ? ReadonlyAccount<TAccountReceivingCustodyDovesPriceAccount>
        : TAccountReceivingCustodyDovesPriceAccount,
      TAccountReceivingCustodyPythnetPriceAccount extends string
        ? ReadonlyAccount<TAccountReceivingCustodyPythnetPriceAccount>
        : TAccountReceivingCustodyPythnetPriceAccount,
      TAccountReceivingCustodyTokenAccount extends string
        ? WritableAccount<TAccountReceivingCustodyTokenAccount>
        : TAccountReceivingCustodyTokenAccount,
      TAccountDispensingCustody extends string
        ? WritableAccount<TAccountDispensingCustody>
        : TAccountDispensingCustody,
      TAccountDispensingCustodyDovesPriceAccount extends string
        ? ReadonlyAccount<TAccountDispensingCustodyDovesPriceAccount>
        : TAccountDispensingCustodyDovesPriceAccount,
      TAccountDispensingCustodyPythnetPriceAccount extends string
        ? ReadonlyAccount<TAccountDispensingCustodyPythnetPriceAccount>
        : TAccountDispensingCustodyPythnetPriceAccount,
      TAccountDispensingCustodyTokenAccount extends string
        ? WritableAccount<TAccountDispensingCustodyTokenAccount>
        : TAccountDispensingCustodyTokenAccount,
      TAccountTokenProgram extends string
        ? ReadonlyAccount<TAccountTokenProgram>
        : TAccountTokenProgram,
      TAccountEventAuthority extends string
        ? ReadonlyAccount<TAccountEventAuthority>
        : TAccountEventAuthority,
      TAccountProgram extends string
        ? ReadonlyAccount<TAccountProgram>
        : TAccountProgram,
      ...TRemainingAccounts,
    ]
  >

export type Swap2InstructionData = {
  discriminator: ReadonlyUint8Array
  amountIn: bigint
  minAmountOut: bigint
}

export type Swap2InstructionDataArgs = {
  amountIn: number | bigint
  minAmountOut: number | bigint
}

export function getSwap2InstructionDataEncoder(): FixedSizeEncoder<Swap2InstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['amountIn', getU64Encoder()],
      ['minAmountOut', getU64Encoder()],
    ]),
    (value) => ({ ...value, discriminator: SWAP2_DISCRIMINATOR })
  )
}

export function getSwap2InstructionDataDecoder(): FixedSizeDecoder<Swap2InstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['amountIn', getU64Decoder()],
    ['minAmountOut', getU64Decoder()],
  ])
}

export function getSwap2InstructionDataCodec(): FixedSizeCodec<
  Swap2InstructionDataArgs,
  Swap2InstructionData
> {
  return combineCodec(
    getSwap2InstructionDataEncoder(),
    getSwap2InstructionDataDecoder()
  )
}

export type Swap2Input<
  TAccountOwner extends string = string,
  TAccountFundingAccount extends string = string,
  TAccountReceivingAccount extends string = string,
  TAccountTransferAuthority extends string = string,
  TAccountPerpetuals extends string = string,
  TAccountPool extends string = string,
  TAccountReceivingCustody extends string = string,
  TAccountReceivingCustodyDovesPriceAccount extends string = string,
  TAccountReceivingCustodyPythnetPriceAccount extends string = string,
  TAccountReceivingCustodyTokenAccount extends string = string,
  TAccountDispensingCustody extends string = string,
  TAccountDispensingCustodyDovesPriceAccount extends string = string,
  TAccountDispensingCustodyPythnetPriceAccount extends string = string,
  TAccountDispensingCustodyTokenAccount extends string = string,
  TAccountTokenProgram extends string = string,
  TAccountEventAuthority extends string = string,
  TAccountProgram extends string = string,
> = {
  owner: TransactionSigner<TAccountOwner>
  fundingAccount: Address<TAccountFundingAccount>
  receivingAccount: Address<TAccountReceivingAccount>
  transferAuthority: Address<TAccountTransferAuthority>
  perpetuals: Address<TAccountPerpetuals>
  pool: Address<TAccountPool>
  receivingCustody: Address<TAccountReceivingCustody>
  receivingCustodyDovesPriceAccount: Address<TAccountReceivingCustodyDovesPriceAccount>
  receivingCustodyPythnetPriceAccount: Address<TAccountReceivingCustodyPythnetPriceAccount>
  receivingCustodyTokenAccount: Address<TAccountReceivingCustodyTokenAccount>
  dispensingCustody: Address<TAccountDispensingCustody>
  dispensingCustodyDovesPriceAccount: Address<TAccountDispensingCustodyDovesPriceAccount>
  dispensingCustodyPythnetPriceAccount: Address<TAccountDispensingCustodyPythnetPriceAccount>
  dispensingCustodyTokenAccount: Address<TAccountDispensingCustodyTokenAccount>
  tokenProgram?: Address<TAccountTokenProgram>
  eventAuthority: Address<TAccountEventAuthority>
  program: Address<TAccountProgram>
  amountIn: Swap2InstructionDataArgs['amountIn']
  minAmountOut: Swap2InstructionDataArgs['minAmountOut']
}

export function getSwap2Instruction<
  TAccountOwner extends string,
  TAccountFundingAccount extends string,
  TAccountReceivingAccount extends string,
  TAccountTransferAuthority extends string,
  TAccountPerpetuals extends string,
  TAccountPool extends string,
  TAccountReceivingCustody extends string,
  TAccountReceivingCustodyDovesPriceAccount extends string,
  TAccountReceivingCustodyPythnetPriceAccount extends string,
  TAccountReceivingCustodyTokenAccount extends string,
  TAccountDispensingCustody extends string,
  TAccountDispensingCustodyDovesPriceAccount extends string,
  TAccountDispensingCustodyPythnetPriceAccount extends string,
  TAccountDispensingCustodyTokenAccount extends string,
  TAccountTokenProgram extends string,
  TAccountEventAuthority extends string,
  TAccountProgram extends string,
  TProgramAddress extends Address = typeof PERPETUALS_PROGRAM_ADDRESS,
>(
  input: Swap2Input<
    TAccountOwner,
    TAccountFundingAccount,
    TAccountReceivingAccount,
    TAccountTransferAuthority,
    TAccountPerpetuals,
    TAccountPool,
    TAccountReceivingCustody,
    TAccountReceivingCustodyDovesPriceAccount,
    TAccountReceivingCustodyPythnetPriceAccount,
    TAccountReceivingCustodyTokenAccount,
    TAccountDispensingCustody,
    TAccountDispensingCustodyDovesPriceAccount,
    TAccountDispensingCustodyPythnetPriceAccount,
    TAccountDispensingCustodyTokenAccount,
    TAccountTokenProgram,
    TAccountEventAuthority,
    TAccountProgram
  >,
  config?: { programAddress?: TProgramAddress }
): Swap2Instruction<
  TProgramAddress,
  TAccountOwner,
  TAccountFundingAccount,
  TAccountReceivingAccount,
  TAccountTransferAuthority,
  TAccountPerpetuals,
  TAccountPool,
  TAccountReceivingCustody,
  TAccountReceivingCustodyDovesPriceAccount,
  TAccountReceivingCustodyPythnetPriceAccount,
  TAccountReceivingCustodyTokenAccount,
  TAccountDispensingCustody,
  TAccountDispensingCustodyDovesPriceAccount,
  TAccountDispensingCustodyPythnetPriceAccount,
  TAccountDispensingCustodyTokenAccount,
  TAccountTokenProgram,
  TAccountEventAuthority,
  TAccountProgram
> {
  // Program address.
  const programAddress = config?.programAddress ?? PERPETUALS_PROGRAM_ADDRESS

  // Original accounts.
  const originalAccounts = {
    owner: { value: input.owner ?? null, isWritable: false },
    fundingAccount: { value: input.fundingAccount ?? null, isWritable: true },
    receivingAccount: {
      value: input.receivingAccount ?? null,
      isWritable: true,
    },
    transferAuthority: {
      value: input.transferAuthority ?? null,
      isWritable: false,
    },
    perpetuals: { value: input.perpetuals ?? null, isWritable: false },
    pool: { value: input.pool ?? null, isWritable: true },
    receivingCustody: {
      value: input.receivingCustody ?? null,
      isWritable: true,
    },
    receivingCustodyDovesPriceAccount: {
      value: input.receivingCustodyDovesPriceAccount ?? null,
      isWritable: false,
    },
    receivingCustodyPythnetPriceAccount: {
      value: input.receivingCustodyPythnetPriceAccount ?? null,
      isWritable: false,
    },
    receivingCustodyTokenAccount: {
      value: input.receivingCustodyTokenAccount ?? null,
      isWritable: true,
    },
    dispensingCustody: {
      value: input.dispensingCustody ?? null,
      isWritable: true,
    },
    dispensingCustodyDovesPriceAccount: {
      value: input.dispensingCustodyDovesPriceAccount ?? null,
      isWritable: false,
    },
    dispensingCustodyPythnetPriceAccount: {
      value: input.dispensingCustodyPythnetPriceAccount ?? null,
      isWritable: false,
    },
    dispensingCustodyTokenAccount: {
      value: input.dispensingCustodyTokenAccount ?? null,
      isWritable: true,
    },
    tokenProgram: { value: input.tokenProgram ?? null, isWritable: false },
    eventAuthority: { value: input.eventAuthority ?? null, isWritable: false },
    program: { value: input.program ?? null, isWritable: false },
  }
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >

  // Original args.
  const args = { ...input }

  // Resolve default values.
  if (!accounts.tokenProgram.value) {
    accounts.tokenProgram.value =
      'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA' as Address<'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'>
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId')
  const instruction = {
    accounts: [
      getAccountMeta(accounts.owner),
      getAccountMeta(accounts.fundingAccount),
      getAccountMeta(accounts.receivingAccount),
      getAccountMeta(accounts.transferAuthority),
      getAccountMeta(accounts.perpetuals),
      getAccountMeta(accounts.pool),
      getAccountMeta(accounts.receivingCustody),
      getAccountMeta(accounts.receivingCustodyDovesPriceAccount),
      getAccountMeta(accounts.receivingCustodyPythnetPriceAccount),
      getAccountMeta(accounts.receivingCustodyTokenAccount),
      getAccountMeta(accounts.dispensingCustody),
      getAccountMeta(accounts.dispensingCustodyDovesPriceAccount),
      getAccountMeta(accounts.dispensingCustodyPythnetPriceAccount),
      getAccountMeta(accounts.dispensingCustodyTokenAccount),
      getAccountMeta(accounts.tokenProgram),
      getAccountMeta(accounts.eventAuthority),
      getAccountMeta(accounts.program),
    ],
    programAddress,
    data: getSwap2InstructionDataEncoder().encode(
      args as Swap2InstructionDataArgs
    ),
  } as Swap2Instruction<
    TProgramAddress,
    TAccountOwner,
    TAccountFundingAccount,
    TAccountReceivingAccount,
    TAccountTransferAuthority,
    TAccountPerpetuals,
    TAccountPool,
    TAccountReceivingCustody,
    TAccountReceivingCustodyDovesPriceAccount,
    TAccountReceivingCustodyPythnetPriceAccount,
    TAccountReceivingCustodyTokenAccount,
    TAccountDispensingCustody,
    TAccountDispensingCustodyDovesPriceAccount,
    TAccountDispensingCustodyPythnetPriceAccount,
    TAccountDispensingCustodyTokenAccount,
    TAccountTokenProgram,
    TAccountEventAuthority,
    TAccountProgram
  >

  return instruction
}

export type ParsedSwap2Instruction<
  TProgram extends string = typeof PERPETUALS_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> = {
  programAddress: Address<TProgram>
  accounts: {
    owner: TAccountMetas[0]
    fundingAccount: TAccountMetas[1]
    receivingAccount: TAccountMetas[2]
    transferAuthority: TAccountMetas[3]
    perpetuals: TAccountMetas[4]
    pool: TAccountMetas[5]
    receivingCustody: TAccountMetas[6]
    receivingCustodyDovesPriceAccount: TAccountMetas[7]
    receivingCustodyPythnetPriceAccount: TAccountMetas[8]
    receivingCustodyTokenAccount: TAccountMetas[9]
    dispensingCustody: TAccountMetas[10]
    dispensingCustodyDovesPriceAccount: TAccountMetas[11]
    dispensingCustodyPythnetPriceAccount: TAccountMetas[12]
    dispensingCustodyTokenAccount: TAccountMetas[13]
    tokenProgram: TAccountMetas[14]
    eventAuthority: TAccountMetas[15]
    program: TAccountMetas[16]
  }
  data: Swap2InstructionData
}

export function parseSwap2Instruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>
): ParsedSwap2Instruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 17) {
    // TODO: Coded error.
    throw new Error('Not enough accounts')
  }
  let accountIndex = 0
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!
    accountIndex += 1
    return accountMeta
  }
  return {
    programAddress: instruction.programAddress,
    accounts: {
      owner: getNextAccount(),
      fundingAccount: getNextAccount(),
      receivingAccount: getNextAccount(),
      transferAuthority: getNextAccount(),
      perpetuals: getNextAccount(),
      pool: getNextAccount(),
      receivingCustody: getNextAccount(),
      receivingCustodyDovesPriceAccount: getNextAccount(),
      receivingCustodyPythnetPriceAccount: getNextAccount(),
      receivingCustodyTokenAccount: getNextAccount(),
      dispensingCustody: getNextAccount(),
      dispensingCustodyDovesPriceAccount: getNextAccount(),
      dispensingCustodyPythnetPriceAccount: getNextAccount(),
      dispensingCustodyTokenAccount: getNextAccount(),
      tokenProgram: getNextAccount(),
      eventAuthority: getNextAccount(),
      program: getNextAccount(),
    },
    data: getSwap2InstructionDataDecoder().decode(instruction.data),
  }
}
