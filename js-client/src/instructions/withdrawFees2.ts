/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  transformEncoder,
  type AccountMeta,
  type AccountSignerMeta,
  type Address,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
  type Instruction,
  type InstructionWithAccounts,
  type InstructionWithData,
  type ReadonlyAccount,
  type ReadonlySignerAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
} from '@solana/kit'
import { PERPETUALS_PROGRAM_ADDRESS } from '../programs'
import { getAccountMetaFactory, type ResolvedAccount } from '../shared'

export const WITHDRAW_FEES2_DISCRIMINATOR = new Uint8Array([
  252, 128, 143, 145, 225, 221, 159, 207,
])

export function getWithdrawFees2DiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    WITHDRAW_FEES2_DISCRIMINATOR
  )
}

export type WithdrawFees2Instruction<
  TProgram extends string = typeof PERPETUALS_PROGRAM_ADDRESS,
  TAccountKeeper extends string | AccountMeta<string> = string,
  TAccountTransferAuthority extends string | AccountMeta<string> = string,
  TAccountPerpetuals extends string | AccountMeta<string> = string,
  TAccountPool extends string | AccountMeta<string> = string,
  TAccountCustody extends string | AccountMeta<string> = string,
  TAccountCustodyTokenAccount extends string | AccountMeta<string> = string,
  TAccountCustodyDovesPriceAccount extends
    | string
    | AccountMeta<string> = string,
  TAccountCustodyPythnetPriceAccount extends
    | string
    | AccountMeta<string> = string,
  TAccountReceivingTokenAccount extends string | AccountMeta<string> = string,
  TAccountTokenProgram extends
    | string
    | AccountMeta<string> = 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA',
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountKeeper extends string
        ? ReadonlySignerAccount<TAccountKeeper> &
            AccountSignerMeta<TAccountKeeper>
        : TAccountKeeper,
      TAccountTransferAuthority extends string
        ? ReadonlyAccount<TAccountTransferAuthority>
        : TAccountTransferAuthority,
      TAccountPerpetuals extends string
        ? ReadonlyAccount<TAccountPerpetuals>
        : TAccountPerpetuals,
      TAccountPool extends string
        ? WritableAccount<TAccountPool>
        : TAccountPool,
      TAccountCustody extends string
        ? WritableAccount<TAccountCustody>
        : TAccountCustody,
      TAccountCustodyTokenAccount extends string
        ? WritableAccount<TAccountCustodyTokenAccount>
        : TAccountCustodyTokenAccount,
      TAccountCustodyDovesPriceAccount extends string
        ? ReadonlyAccount<TAccountCustodyDovesPriceAccount>
        : TAccountCustodyDovesPriceAccount,
      TAccountCustodyPythnetPriceAccount extends string
        ? ReadonlyAccount<TAccountCustodyPythnetPriceAccount>
        : TAccountCustodyPythnetPriceAccount,
      TAccountReceivingTokenAccount extends string
        ? WritableAccount<TAccountReceivingTokenAccount>
        : TAccountReceivingTokenAccount,
      TAccountTokenProgram extends string
        ? ReadonlyAccount<TAccountTokenProgram>
        : TAccountTokenProgram,
      ...TRemainingAccounts,
    ]
  >

export type WithdrawFees2InstructionData = { discriminator: ReadonlyUint8Array }

export type WithdrawFees2InstructionDataArgs = {}

export function getWithdrawFees2InstructionDataEncoder(): FixedSizeEncoder<WithdrawFees2InstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([['discriminator', fixEncoderSize(getBytesEncoder(), 8)]]),
    (value) => ({ ...value, discriminator: WITHDRAW_FEES2_DISCRIMINATOR })
  )
}

export function getWithdrawFees2InstructionDataDecoder(): FixedSizeDecoder<WithdrawFees2InstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
  ])
}

export function getWithdrawFees2InstructionDataCodec(): FixedSizeCodec<
  WithdrawFees2InstructionDataArgs,
  WithdrawFees2InstructionData
> {
  return combineCodec(
    getWithdrawFees2InstructionDataEncoder(),
    getWithdrawFees2InstructionDataDecoder()
  )
}

export type WithdrawFees2Input<
  TAccountKeeper extends string = string,
  TAccountTransferAuthority extends string = string,
  TAccountPerpetuals extends string = string,
  TAccountPool extends string = string,
  TAccountCustody extends string = string,
  TAccountCustodyTokenAccount extends string = string,
  TAccountCustodyDovesPriceAccount extends string = string,
  TAccountCustodyPythnetPriceAccount extends string = string,
  TAccountReceivingTokenAccount extends string = string,
  TAccountTokenProgram extends string = string,
> = {
  keeper: TransactionSigner<TAccountKeeper>
  transferAuthority: Address<TAccountTransferAuthority>
  perpetuals: Address<TAccountPerpetuals>
  pool: Address<TAccountPool>
  custody: Address<TAccountCustody>
  custodyTokenAccount: Address<TAccountCustodyTokenAccount>
  custodyDovesPriceAccount: Address<TAccountCustodyDovesPriceAccount>
  custodyPythnetPriceAccount: Address<TAccountCustodyPythnetPriceAccount>
  receivingTokenAccount: Address<TAccountReceivingTokenAccount>
  tokenProgram?: Address<TAccountTokenProgram>
}

export function getWithdrawFees2Instruction<
  TAccountKeeper extends string,
  TAccountTransferAuthority extends string,
  TAccountPerpetuals extends string,
  TAccountPool extends string,
  TAccountCustody extends string,
  TAccountCustodyTokenAccount extends string,
  TAccountCustodyDovesPriceAccount extends string,
  TAccountCustodyPythnetPriceAccount extends string,
  TAccountReceivingTokenAccount extends string,
  TAccountTokenProgram extends string,
  TProgramAddress extends Address = typeof PERPETUALS_PROGRAM_ADDRESS,
>(
  input: WithdrawFees2Input<
    TAccountKeeper,
    TAccountTransferAuthority,
    TAccountPerpetuals,
    TAccountPool,
    TAccountCustody,
    TAccountCustodyTokenAccount,
    TAccountCustodyDovesPriceAccount,
    TAccountCustodyPythnetPriceAccount,
    TAccountReceivingTokenAccount,
    TAccountTokenProgram
  >,
  config?: { programAddress?: TProgramAddress }
): WithdrawFees2Instruction<
  TProgramAddress,
  TAccountKeeper,
  TAccountTransferAuthority,
  TAccountPerpetuals,
  TAccountPool,
  TAccountCustody,
  TAccountCustodyTokenAccount,
  TAccountCustodyDovesPriceAccount,
  TAccountCustodyPythnetPriceAccount,
  TAccountReceivingTokenAccount,
  TAccountTokenProgram
> {
  // Program address.
  const programAddress = config?.programAddress ?? PERPETUALS_PROGRAM_ADDRESS

  // Original accounts.
  const originalAccounts = {
    keeper: { value: input.keeper ?? null, isWritable: false },
    transferAuthority: {
      value: input.transferAuthority ?? null,
      isWritable: false,
    },
    perpetuals: { value: input.perpetuals ?? null, isWritable: false },
    pool: { value: input.pool ?? null, isWritable: true },
    custody: { value: input.custody ?? null, isWritable: true },
    custodyTokenAccount: {
      value: input.custodyTokenAccount ?? null,
      isWritable: true,
    },
    custodyDovesPriceAccount: {
      value: input.custodyDovesPriceAccount ?? null,
      isWritable: false,
    },
    custodyPythnetPriceAccount: {
      value: input.custodyPythnetPriceAccount ?? null,
      isWritable: false,
    },
    receivingTokenAccount: {
      value: input.receivingTokenAccount ?? null,
      isWritable: true,
    },
    tokenProgram: { value: input.tokenProgram ?? null, isWritable: false },
  }
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >

  // Resolve default values.
  if (!accounts.tokenProgram.value) {
    accounts.tokenProgram.value =
      'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA' as Address<'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'>
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId')
  const instruction = {
    accounts: [
      getAccountMeta(accounts.keeper),
      getAccountMeta(accounts.transferAuthority),
      getAccountMeta(accounts.perpetuals),
      getAccountMeta(accounts.pool),
      getAccountMeta(accounts.custody),
      getAccountMeta(accounts.custodyTokenAccount),
      getAccountMeta(accounts.custodyDovesPriceAccount),
      getAccountMeta(accounts.custodyPythnetPriceAccount),
      getAccountMeta(accounts.receivingTokenAccount),
      getAccountMeta(accounts.tokenProgram),
    ],
    programAddress,
    data: getWithdrawFees2InstructionDataEncoder().encode({}),
  } as WithdrawFees2Instruction<
    TProgramAddress,
    TAccountKeeper,
    TAccountTransferAuthority,
    TAccountPerpetuals,
    TAccountPool,
    TAccountCustody,
    TAccountCustodyTokenAccount,
    TAccountCustodyDovesPriceAccount,
    TAccountCustodyPythnetPriceAccount,
    TAccountReceivingTokenAccount,
    TAccountTokenProgram
  >

  return instruction
}

export type ParsedWithdrawFees2Instruction<
  TProgram extends string = typeof PERPETUALS_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> = {
  programAddress: Address<TProgram>
  accounts: {
    keeper: TAccountMetas[0]
    transferAuthority: TAccountMetas[1]
    perpetuals: TAccountMetas[2]
    pool: TAccountMetas[3]
    custody: TAccountMetas[4]
    custodyTokenAccount: TAccountMetas[5]
    custodyDovesPriceAccount: TAccountMetas[6]
    custodyPythnetPriceAccount: TAccountMetas[7]
    receivingTokenAccount: TAccountMetas[8]
    tokenProgram: TAccountMetas[9]
  }
  data: WithdrawFees2InstructionData
}

export function parseWithdrawFees2Instruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>
): ParsedWithdrawFees2Instruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 10) {
    // TODO: Coded error.
    throw new Error('Not enough accounts')
  }
  let accountIndex = 0
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!
    accountIndex += 1
    return accountMeta
  }
  return {
    programAddress: instruction.programAddress,
    accounts: {
      keeper: getNextAccount(),
      transferAuthority: getNextAccount(),
      perpetuals: getNextAccount(),
      pool: getNextAccount(),
      custody: getNextAccount(),
      custodyTokenAccount: getNextAccount(),
      custodyDovesPriceAccount: getNextAccount(),
      custodyPythnetPriceAccount: getNextAccount(),
      receivingTokenAccount: getNextAccount(),
      tokenProgram: getNextAccount(),
    },
    data: getWithdrawFees2InstructionDataDecoder().decode(instruction.data),
  }
}
