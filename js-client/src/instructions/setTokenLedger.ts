/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  transformEncoder,
  type AccountMeta,
  type Address,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
  type Instruction,
  type InstructionWithAccounts,
  type InstructionWithData,
  type ReadonlyAccount,
  type ReadonlyUint8Array,
  type WritableAccount,
} from '@solana/kit'
import { PERPETUALS_PROGRAM_ADDRESS } from '../programs'
import { getAccountMetaFactory, type ResolvedAccount } from '../shared'

export const SET_TOKEN_LEDGER_DISCRIMINATOR = new Uint8Array([
  228, 85, 185, 112, 78, 79, 77, 2,
])

export function getSetTokenLedgerDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    SET_TOKEN_LEDGER_DISCRIMINATOR
  )
}

export type SetTokenLedgerInstruction<
  TProgram extends string = typeof PERPETUALS_PROGRAM_ADDRESS,
  TAccountTokenLedger extends string | AccountMeta<string> = string,
  TAccountTokenAccount extends string | AccountMeta<string> = string,
  TAccountTokenProgram extends
    | string
    | AccountMeta<string> = 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA',
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountTokenLedger extends string
        ? WritableAccount<TAccountTokenLedger>
        : TAccountTokenLedger,
      TAccountTokenAccount extends string
        ? ReadonlyAccount<TAccountTokenAccount>
        : TAccountTokenAccount,
      TAccountTokenProgram extends string
        ? ReadonlyAccount<TAccountTokenProgram>
        : TAccountTokenProgram,
      ...TRemainingAccounts,
    ]
  >

export type SetTokenLedgerInstructionData = {
  discriminator: ReadonlyUint8Array
}

export type SetTokenLedgerInstructionDataArgs = {}

export function getSetTokenLedgerInstructionDataEncoder(): FixedSizeEncoder<SetTokenLedgerInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([['discriminator', fixEncoderSize(getBytesEncoder(), 8)]]),
    (value) => ({ ...value, discriminator: SET_TOKEN_LEDGER_DISCRIMINATOR })
  )
}

export function getSetTokenLedgerInstructionDataDecoder(): FixedSizeDecoder<SetTokenLedgerInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
  ])
}

export function getSetTokenLedgerInstructionDataCodec(): FixedSizeCodec<
  SetTokenLedgerInstructionDataArgs,
  SetTokenLedgerInstructionData
> {
  return combineCodec(
    getSetTokenLedgerInstructionDataEncoder(),
    getSetTokenLedgerInstructionDataDecoder()
  )
}

export type SetTokenLedgerInput<
  TAccountTokenLedger extends string = string,
  TAccountTokenAccount extends string = string,
  TAccountTokenProgram extends string = string,
> = {
  tokenLedger: Address<TAccountTokenLedger>
  tokenAccount: Address<TAccountTokenAccount>
  tokenProgram?: Address<TAccountTokenProgram>
}

export function getSetTokenLedgerInstruction<
  TAccountTokenLedger extends string,
  TAccountTokenAccount extends string,
  TAccountTokenProgram extends string,
  TProgramAddress extends Address = typeof PERPETUALS_PROGRAM_ADDRESS,
>(
  input: SetTokenLedgerInput<
    TAccountTokenLedger,
    TAccountTokenAccount,
    TAccountTokenProgram
  >,
  config?: { programAddress?: TProgramAddress }
): SetTokenLedgerInstruction<
  TProgramAddress,
  TAccountTokenLedger,
  TAccountTokenAccount,
  TAccountTokenProgram
> {
  // Program address.
  const programAddress = config?.programAddress ?? PERPETUALS_PROGRAM_ADDRESS

  // Original accounts.
  const originalAccounts = {
    tokenLedger: { value: input.tokenLedger ?? null, isWritable: true },
    tokenAccount: { value: input.tokenAccount ?? null, isWritable: false },
    tokenProgram: { value: input.tokenProgram ?? null, isWritable: false },
  }
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >

  // Resolve default values.
  if (!accounts.tokenProgram.value) {
    accounts.tokenProgram.value =
      'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA' as Address<'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'>
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId')
  const instruction = {
    accounts: [
      getAccountMeta(accounts.tokenLedger),
      getAccountMeta(accounts.tokenAccount),
      getAccountMeta(accounts.tokenProgram),
    ],
    programAddress,
    data: getSetTokenLedgerInstructionDataEncoder().encode({}),
  } as SetTokenLedgerInstruction<
    TProgramAddress,
    TAccountTokenLedger,
    TAccountTokenAccount,
    TAccountTokenProgram
  >

  return instruction
}

export type ParsedSetTokenLedgerInstruction<
  TProgram extends string = typeof PERPETUALS_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> = {
  programAddress: Address<TProgram>
  accounts: {
    tokenLedger: TAccountMetas[0]
    tokenAccount: TAccountMetas[1]
    tokenProgram: TAccountMetas[2]
  }
  data: SetTokenLedgerInstructionData
}

export function parseSetTokenLedgerInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>
): ParsedSetTokenLedgerInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 3) {
    // TODO: Coded error.
    throw new Error('Not enough accounts')
  }
  let accountIndex = 0
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!
    accountIndex += 1
    return accountMeta
  }
  return {
    programAddress: instruction.programAddress,
    accounts: {
      tokenLedger: getNextAccount(),
      tokenAccount: getNextAccount(),
      tokenProgram: getNextAccount(),
    },
    data: getSetTokenLedgerInstructionDataDecoder().decode(instruction.data),
  }
}
