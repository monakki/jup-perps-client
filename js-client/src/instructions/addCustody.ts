/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getAddressDecoder,
  getAddressEncoder,
  getBooleanDecoder,
  getBooleanEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getF32Decoder,
  getF32Encoder,
  getStructDecoder,
  getStructEncoder,
  getU64Decoder,
  getU64Encoder,
  transformEncoder,
  type AccountMeta,
  type AccountSignerMeta,
  type Address,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
  type Instruction,
  type InstructionWithAccounts,
  type InstructionWithData,
  type ReadonlyAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from '@solana/kit'
import { PERPETUALS_PROGRAM_ADDRESS } from '../programs'
import { getAccountMetaFactory, type ResolvedAccount } from '../shared'
import {
  getJumpRateStateDecoder,
  getJumpRateStateEncoder,
  getOracleParamsDecoder,
  getOracleParamsEncoder,
  getPermissionsDecoder,
  getPermissionsEncoder,
  getPricingParamsDecoder,
  getPricingParamsEncoder,
  type JumpRateState,
  type JumpRateStateArgs,
  type OracleParams,
  type OracleParamsArgs,
  type Permissions,
  type PermissionsArgs,
  type PricingParams,
  type PricingParamsArgs,
} from '../types'

export const ADD_CUSTODY_DISCRIMINATOR = new Uint8Array([
  247, 254, 126, 17, 26, 6, 215, 117,
])

export function getAddCustodyDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(ADD_CUSTODY_DISCRIMINATOR)
}

export type AddCustodyInstruction<
  TProgram extends string = typeof PERPETUALS_PROGRAM_ADDRESS,
  TAccountAdmin extends string | AccountMeta<string> = string,
  TAccountTransferAuthority extends string | AccountMeta<string> = string,
  TAccountPerpetuals extends string | AccountMeta<string> = string,
  TAccountPool extends string | AccountMeta<string> = string,
  TAccountCustody extends string | AccountMeta<string> = string,
  TAccountCustodyTokenAccount extends string | AccountMeta<string> = string,
  TAccountCustodyTokenMint extends string | AccountMeta<string> = string,
  TAccountSystemProgram extends
    | string
    | AccountMeta<string> = '11111111111111111111111111111111',
  TAccountTokenProgram extends
    | string
    | AccountMeta<string> = 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA',
  TAccountRent extends
    | string
    | AccountMeta<string> = 'SysvarRent111111111111111111111111111111111',
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountAdmin extends string
        ? WritableSignerAccount<TAccountAdmin> &
            AccountSignerMeta<TAccountAdmin>
        : TAccountAdmin,
      TAccountTransferAuthority extends string
        ? ReadonlyAccount<TAccountTransferAuthority>
        : TAccountTransferAuthority,
      TAccountPerpetuals extends string
        ? ReadonlyAccount<TAccountPerpetuals>
        : TAccountPerpetuals,
      TAccountPool extends string
        ? WritableAccount<TAccountPool>
        : TAccountPool,
      TAccountCustody extends string
        ? WritableAccount<TAccountCustody>
        : TAccountCustody,
      TAccountCustodyTokenAccount extends string
        ? WritableAccount<TAccountCustodyTokenAccount>
        : TAccountCustodyTokenAccount,
      TAccountCustodyTokenMint extends string
        ? ReadonlyAccount<TAccountCustodyTokenMint>
        : TAccountCustodyTokenMint,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      TAccountTokenProgram extends string
        ? ReadonlyAccount<TAccountTokenProgram>
        : TAccountTokenProgram,
      TAccountRent extends string
        ? ReadonlyAccount<TAccountRent>
        : TAccountRent,
      ...TRemainingAccounts,
    ]
  >

export type AddCustodyInstructionData = {
  discriminator: ReadonlyUint8Array
  isStable: boolean
  oracle: OracleParams
  pricing: PricingParams
  permissions: Permissions
  hourlyFundingDbps: bigint
  targetRatioBps: bigint
  increasePositionBps: bigint
  decreasePositionBps: bigint
  dovesOracle: Address
  maxPositionSizeUsd: bigint
  jumpRate: JumpRateState
  priceImpactFeeFactor: bigint
  priceImpactExponent: number
  deltaImbalanceThresholdDecimal: bigint
  maxFeeBps: bigint
  dovesAgOracle: Address
}

export type AddCustodyInstructionDataArgs = {
  isStable: boolean
  oracle: OracleParamsArgs
  pricing: PricingParamsArgs
  permissions: PermissionsArgs
  hourlyFundingDbps: number | bigint
  targetRatioBps: number | bigint
  increasePositionBps: number | bigint
  decreasePositionBps: number | bigint
  dovesOracle: Address
  maxPositionSizeUsd: number | bigint
  jumpRate: JumpRateStateArgs
  priceImpactFeeFactor: number | bigint
  priceImpactExponent: number
  deltaImbalanceThresholdDecimal: number | bigint
  maxFeeBps: number | bigint
  dovesAgOracle: Address
}

export function getAddCustodyInstructionDataEncoder(): FixedSizeEncoder<AddCustodyInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['isStable', getBooleanEncoder()],
      ['oracle', getOracleParamsEncoder()],
      ['pricing', getPricingParamsEncoder()],
      ['permissions', getPermissionsEncoder()],
      ['hourlyFundingDbps', getU64Encoder()],
      ['targetRatioBps', getU64Encoder()],
      ['increasePositionBps', getU64Encoder()],
      ['decreasePositionBps', getU64Encoder()],
      ['dovesOracle', getAddressEncoder()],
      ['maxPositionSizeUsd', getU64Encoder()],
      ['jumpRate', getJumpRateStateEncoder()],
      ['priceImpactFeeFactor', getU64Encoder()],
      ['priceImpactExponent', getF32Encoder()],
      ['deltaImbalanceThresholdDecimal', getU64Encoder()],
      ['maxFeeBps', getU64Encoder()],
      ['dovesAgOracle', getAddressEncoder()],
    ]),
    (value) => ({ ...value, discriminator: ADD_CUSTODY_DISCRIMINATOR })
  )
}

export function getAddCustodyInstructionDataDecoder(): FixedSizeDecoder<AddCustodyInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['isStable', getBooleanDecoder()],
    ['oracle', getOracleParamsDecoder()],
    ['pricing', getPricingParamsDecoder()],
    ['permissions', getPermissionsDecoder()],
    ['hourlyFundingDbps', getU64Decoder()],
    ['targetRatioBps', getU64Decoder()],
    ['increasePositionBps', getU64Decoder()],
    ['decreasePositionBps', getU64Decoder()],
    ['dovesOracle', getAddressDecoder()],
    ['maxPositionSizeUsd', getU64Decoder()],
    ['jumpRate', getJumpRateStateDecoder()],
    ['priceImpactFeeFactor', getU64Decoder()],
    ['priceImpactExponent', getF32Decoder()],
    ['deltaImbalanceThresholdDecimal', getU64Decoder()],
    ['maxFeeBps', getU64Decoder()],
    ['dovesAgOracle', getAddressDecoder()],
  ])
}

export function getAddCustodyInstructionDataCodec(): FixedSizeCodec<
  AddCustodyInstructionDataArgs,
  AddCustodyInstructionData
> {
  return combineCodec(
    getAddCustodyInstructionDataEncoder(),
    getAddCustodyInstructionDataDecoder()
  )
}

export type AddCustodyInput<
  TAccountAdmin extends string = string,
  TAccountTransferAuthority extends string = string,
  TAccountPerpetuals extends string = string,
  TAccountPool extends string = string,
  TAccountCustody extends string = string,
  TAccountCustodyTokenAccount extends string = string,
  TAccountCustodyTokenMint extends string = string,
  TAccountSystemProgram extends string = string,
  TAccountTokenProgram extends string = string,
  TAccountRent extends string = string,
> = {
  admin: TransactionSigner<TAccountAdmin>
  transferAuthority: Address<TAccountTransferAuthority>
  perpetuals: Address<TAccountPerpetuals>
  pool: Address<TAccountPool>
  custody: Address<TAccountCustody>
  custodyTokenAccount: Address<TAccountCustodyTokenAccount>
  custodyTokenMint: Address<TAccountCustodyTokenMint>
  systemProgram?: Address<TAccountSystemProgram>
  tokenProgram?: Address<TAccountTokenProgram>
  rent?: Address<TAccountRent>
  isStable: AddCustodyInstructionDataArgs['isStable']
  oracle: AddCustodyInstructionDataArgs['oracle']
  pricing: AddCustodyInstructionDataArgs['pricing']
  permissions: AddCustodyInstructionDataArgs['permissions']
  hourlyFundingDbps: AddCustodyInstructionDataArgs['hourlyFundingDbps']
  targetRatioBps: AddCustodyInstructionDataArgs['targetRatioBps']
  increasePositionBps: AddCustodyInstructionDataArgs['increasePositionBps']
  decreasePositionBps: AddCustodyInstructionDataArgs['decreasePositionBps']
  dovesOracle: AddCustodyInstructionDataArgs['dovesOracle']
  maxPositionSizeUsd: AddCustodyInstructionDataArgs['maxPositionSizeUsd']
  jumpRate: AddCustodyInstructionDataArgs['jumpRate']
  priceImpactFeeFactor: AddCustodyInstructionDataArgs['priceImpactFeeFactor']
  priceImpactExponent: AddCustodyInstructionDataArgs['priceImpactExponent']
  deltaImbalanceThresholdDecimal: AddCustodyInstructionDataArgs['deltaImbalanceThresholdDecimal']
  maxFeeBps: AddCustodyInstructionDataArgs['maxFeeBps']
  dovesAgOracle: AddCustodyInstructionDataArgs['dovesAgOracle']
}

export function getAddCustodyInstruction<
  TAccountAdmin extends string,
  TAccountTransferAuthority extends string,
  TAccountPerpetuals extends string,
  TAccountPool extends string,
  TAccountCustody extends string,
  TAccountCustodyTokenAccount extends string,
  TAccountCustodyTokenMint extends string,
  TAccountSystemProgram extends string,
  TAccountTokenProgram extends string,
  TAccountRent extends string,
  TProgramAddress extends Address = typeof PERPETUALS_PROGRAM_ADDRESS,
>(
  input: AddCustodyInput<
    TAccountAdmin,
    TAccountTransferAuthority,
    TAccountPerpetuals,
    TAccountPool,
    TAccountCustody,
    TAccountCustodyTokenAccount,
    TAccountCustodyTokenMint,
    TAccountSystemProgram,
    TAccountTokenProgram,
    TAccountRent
  >,
  config?: { programAddress?: TProgramAddress }
): AddCustodyInstruction<
  TProgramAddress,
  TAccountAdmin,
  TAccountTransferAuthority,
  TAccountPerpetuals,
  TAccountPool,
  TAccountCustody,
  TAccountCustodyTokenAccount,
  TAccountCustodyTokenMint,
  TAccountSystemProgram,
  TAccountTokenProgram,
  TAccountRent
> {
  // Program address.
  const programAddress = config?.programAddress ?? PERPETUALS_PROGRAM_ADDRESS

  // Original accounts.
  const originalAccounts = {
    admin: { value: input.admin ?? null, isWritable: true },
    transferAuthority: {
      value: input.transferAuthority ?? null,
      isWritable: false,
    },
    perpetuals: { value: input.perpetuals ?? null, isWritable: false },
    pool: { value: input.pool ?? null, isWritable: true },
    custody: { value: input.custody ?? null, isWritable: true },
    custodyTokenAccount: {
      value: input.custodyTokenAccount ?? null,
      isWritable: true,
    },
    custodyTokenMint: {
      value: input.custodyTokenMint ?? null,
      isWritable: false,
    },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
    tokenProgram: { value: input.tokenProgram ?? null, isWritable: false },
    rent: { value: input.rent ?? null, isWritable: false },
  }
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >

  // Original args.
  const args = { ...input }

  // Resolve default values.
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>
  }
  if (!accounts.tokenProgram.value) {
    accounts.tokenProgram.value =
      'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA' as Address<'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'>
  }
  if (!accounts.rent.value) {
    accounts.rent.value =
      'SysvarRent111111111111111111111111111111111' as Address<'SysvarRent111111111111111111111111111111111'>
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId')
  const instruction = {
    accounts: [
      getAccountMeta(accounts.admin),
      getAccountMeta(accounts.transferAuthority),
      getAccountMeta(accounts.perpetuals),
      getAccountMeta(accounts.pool),
      getAccountMeta(accounts.custody),
      getAccountMeta(accounts.custodyTokenAccount),
      getAccountMeta(accounts.custodyTokenMint),
      getAccountMeta(accounts.systemProgram),
      getAccountMeta(accounts.tokenProgram),
      getAccountMeta(accounts.rent),
    ],
    programAddress,
    data: getAddCustodyInstructionDataEncoder().encode(
      args as AddCustodyInstructionDataArgs
    ),
  } as AddCustodyInstruction<
    TProgramAddress,
    TAccountAdmin,
    TAccountTransferAuthority,
    TAccountPerpetuals,
    TAccountPool,
    TAccountCustody,
    TAccountCustodyTokenAccount,
    TAccountCustodyTokenMint,
    TAccountSystemProgram,
    TAccountTokenProgram,
    TAccountRent
  >

  return instruction
}

export type ParsedAddCustodyInstruction<
  TProgram extends string = typeof PERPETUALS_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> = {
  programAddress: Address<TProgram>
  accounts: {
    admin: TAccountMetas[0]
    transferAuthority: TAccountMetas[1]
    perpetuals: TAccountMetas[2]
    pool: TAccountMetas[3]
    custody: TAccountMetas[4]
    custodyTokenAccount: TAccountMetas[5]
    custodyTokenMint: TAccountMetas[6]
    systemProgram: TAccountMetas[7]
    tokenProgram: TAccountMetas[8]
    rent: TAccountMetas[9]
  }
  data: AddCustodyInstructionData
}

export function parseAddCustodyInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>
): ParsedAddCustodyInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 10) {
    // TODO: Coded error.
    throw new Error('Not enough accounts')
  }
  let accountIndex = 0
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!
    accountIndex += 1
    return accountMeta
  }
  return {
    programAddress: instruction.programAddress,
    accounts: {
      admin: getNextAccount(),
      transferAuthority: getNextAccount(),
      perpetuals: getNextAccount(),
      pool: getNextAccount(),
      custody: getNextAccount(),
      custodyTokenAccount: getNextAccount(),
      custodyTokenMint: getNextAccount(),
      systemProgram: getNextAccount(),
      tokenProgram: getNextAccount(),
      rent: getNextAccount(),
    },
    data: getAddCustodyInstructionDataDecoder().decode(instruction.data),
  }
}
