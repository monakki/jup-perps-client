/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getAddressDecoder,
  getAddressEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getF32Decoder,
  getF32Encoder,
  getStructDecoder,
  getStructEncoder,
  getU64Decoder,
  getU64Encoder,
  transformEncoder,
  type AccountMeta,
  type AccountSignerMeta,
  type Address,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
  type Instruction,
  type InstructionWithAccounts,
  type InstructionWithData,
  type ReadonlyAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from '@solana/kit'
import { PERPETUALS_PROGRAM_ADDRESS } from '../programs'
import { getAccountMetaFactory, type ResolvedAccount } from '../shared'
import {
  getJumpRateStateDecoder,
  getJumpRateStateEncoder,
  getOracleParamsDecoder,
  getOracleParamsEncoder,
  getPermissionsDecoder,
  getPermissionsEncoder,
  getPricingParamsDecoder,
  getPricingParamsEncoder,
  type JumpRateState,
  type JumpRateStateArgs,
  type OracleParams,
  type OracleParamsArgs,
  type Permissions,
  type PermissionsArgs,
  type PricingParams,
  type PricingParamsArgs,
} from '../types'

export const SET_CUSTODY_CONFIG_DISCRIMINATOR = new Uint8Array([
  133, 97, 130, 143, 215, 229, 36, 176,
])

export function getSetCustodyConfigDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    SET_CUSTODY_CONFIG_DISCRIMINATOR
  )
}

export type SetCustodyConfigInstruction<
  TProgram extends string = typeof PERPETUALS_PROGRAM_ADDRESS,
  TAccountAdmin extends string | AccountMeta<string> = string,
  TAccountPerpetuals extends string | AccountMeta<string> = string,
  TAccountCustody extends string | AccountMeta<string> = string,
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountAdmin extends string
        ? WritableSignerAccount<TAccountAdmin> &
            AccountSignerMeta<TAccountAdmin>
        : TAccountAdmin,
      TAccountPerpetuals extends string
        ? ReadonlyAccount<TAccountPerpetuals>
        : TAccountPerpetuals,
      TAccountCustody extends string
        ? WritableAccount<TAccountCustody>
        : TAccountCustody,
      ...TRemainingAccounts,
    ]
  >

export type SetCustodyConfigInstructionData = {
  discriminator: ReadonlyUint8Array
  oracle: OracleParams
  pricing: PricingParams
  permissions: Permissions
  hourlyFundingDbps: bigint
  targetRatioBps: bigint
  increasePositionBps: bigint
  decreasePositionBps: bigint
  dovesOracle: Address
  maxPositionSizeUsd: bigint
  jumpRate: JumpRateState
  priceImpactFeeFactor: bigint
  priceImpactExponent: number
  deltaImbalanceThresholdDecimal: bigint
  maxFeeBps: bigint
  dovesAgOracle: Address
}

export type SetCustodyConfigInstructionDataArgs = {
  oracle: OracleParamsArgs
  pricing: PricingParamsArgs
  permissions: PermissionsArgs
  hourlyFundingDbps: number | bigint
  targetRatioBps: number | bigint
  increasePositionBps: number | bigint
  decreasePositionBps: number | bigint
  dovesOracle: Address
  maxPositionSizeUsd: number | bigint
  jumpRate: JumpRateStateArgs
  priceImpactFeeFactor: number | bigint
  priceImpactExponent: number
  deltaImbalanceThresholdDecimal: number | bigint
  maxFeeBps: number | bigint
  dovesAgOracle: Address
}

export function getSetCustodyConfigInstructionDataEncoder(): FixedSizeEncoder<SetCustodyConfigInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['oracle', getOracleParamsEncoder()],
      ['pricing', getPricingParamsEncoder()],
      ['permissions', getPermissionsEncoder()],
      ['hourlyFundingDbps', getU64Encoder()],
      ['targetRatioBps', getU64Encoder()],
      ['increasePositionBps', getU64Encoder()],
      ['decreasePositionBps', getU64Encoder()],
      ['dovesOracle', getAddressEncoder()],
      ['maxPositionSizeUsd', getU64Encoder()],
      ['jumpRate', getJumpRateStateEncoder()],
      ['priceImpactFeeFactor', getU64Encoder()],
      ['priceImpactExponent', getF32Encoder()],
      ['deltaImbalanceThresholdDecimal', getU64Encoder()],
      ['maxFeeBps', getU64Encoder()],
      ['dovesAgOracle', getAddressEncoder()],
    ]),
    (value) => ({ ...value, discriminator: SET_CUSTODY_CONFIG_DISCRIMINATOR })
  )
}

export function getSetCustodyConfigInstructionDataDecoder(): FixedSizeDecoder<SetCustodyConfigInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['oracle', getOracleParamsDecoder()],
    ['pricing', getPricingParamsDecoder()],
    ['permissions', getPermissionsDecoder()],
    ['hourlyFundingDbps', getU64Decoder()],
    ['targetRatioBps', getU64Decoder()],
    ['increasePositionBps', getU64Decoder()],
    ['decreasePositionBps', getU64Decoder()],
    ['dovesOracle', getAddressDecoder()],
    ['maxPositionSizeUsd', getU64Decoder()],
    ['jumpRate', getJumpRateStateDecoder()],
    ['priceImpactFeeFactor', getU64Decoder()],
    ['priceImpactExponent', getF32Decoder()],
    ['deltaImbalanceThresholdDecimal', getU64Decoder()],
    ['maxFeeBps', getU64Decoder()],
    ['dovesAgOracle', getAddressDecoder()],
  ])
}

export function getSetCustodyConfigInstructionDataCodec(): FixedSizeCodec<
  SetCustodyConfigInstructionDataArgs,
  SetCustodyConfigInstructionData
> {
  return combineCodec(
    getSetCustodyConfigInstructionDataEncoder(),
    getSetCustodyConfigInstructionDataDecoder()
  )
}

export type SetCustodyConfigInput<
  TAccountAdmin extends string = string,
  TAccountPerpetuals extends string = string,
  TAccountCustody extends string = string,
> = {
  admin: TransactionSigner<TAccountAdmin>
  perpetuals: Address<TAccountPerpetuals>
  custody: Address<TAccountCustody>
  oracle: SetCustodyConfigInstructionDataArgs['oracle']
  pricing: SetCustodyConfigInstructionDataArgs['pricing']
  permissions: SetCustodyConfigInstructionDataArgs['permissions']
  hourlyFundingDbps: SetCustodyConfigInstructionDataArgs['hourlyFundingDbps']
  targetRatioBps: SetCustodyConfigInstructionDataArgs['targetRatioBps']
  increasePositionBps: SetCustodyConfigInstructionDataArgs['increasePositionBps']
  decreasePositionBps: SetCustodyConfigInstructionDataArgs['decreasePositionBps']
  dovesOracle: SetCustodyConfigInstructionDataArgs['dovesOracle']
  maxPositionSizeUsd: SetCustodyConfigInstructionDataArgs['maxPositionSizeUsd']
  jumpRate: SetCustodyConfigInstructionDataArgs['jumpRate']
  priceImpactFeeFactor: SetCustodyConfigInstructionDataArgs['priceImpactFeeFactor']
  priceImpactExponent: SetCustodyConfigInstructionDataArgs['priceImpactExponent']
  deltaImbalanceThresholdDecimal: SetCustodyConfigInstructionDataArgs['deltaImbalanceThresholdDecimal']
  maxFeeBps: SetCustodyConfigInstructionDataArgs['maxFeeBps']
  dovesAgOracle: SetCustodyConfigInstructionDataArgs['dovesAgOracle']
}

export function getSetCustodyConfigInstruction<
  TAccountAdmin extends string,
  TAccountPerpetuals extends string,
  TAccountCustody extends string,
  TProgramAddress extends Address = typeof PERPETUALS_PROGRAM_ADDRESS,
>(
  input: SetCustodyConfigInput<
    TAccountAdmin,
    TAccountPerpetuals,
    TAccountCustody
  >,
  config?: { programAddress?: TProgramAddress }
): SetCustodyConfigInstruction<
  TProgramAddress,
  TAccountAdmin,
  TAccountPerpetuals,
  TAccountCustody
> {
  // Program address.
  const programAddress = config?.programAddress ?? PERPETUALS_PROGRAM_ADDRESS

  // Original accounts.
  const originalAccounts = {
    admin: { value: input.admin ?? null, isWritable: true },
    perpetuals: { value: input.perpetuals ?? null, isWritable: false },
    custody: { value: input.custody ?? null, isWritable: true },
  }
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >

  // Original args.
  const args = { ...input }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId')
  const instruction = {
    accounts: [
      getAccountMeta(accounts.admin),
      getAccountMeta(accounts.perpetuals),
      getAccountMeta(accounts.custody),
    ],
    programAddress,
    data: getSetCustodyConfigInstructionDataEncoder().encode(
      args as SetCustodyConfigInstructionDataArgs
    ),
  } as SetCustodyConfigInstruction<
    TProgramAddress,
    TAccountAdmin,
    TAccountPerpetuals,
    TAccountCustody
  >

  return instruction
}

export type ParsedSetCustodyConfigInstruction<
  TProgram extends string = typeof PERPETUALS_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> = {
  programAddress: Address<TProgram>
  accounts: {
    admin: TAccountMetas[0]
    perpetuals: TAccountMetas[1]
    custody: TAccountMetas[2]
  }
  data: SetCustodyConfigInstructionData
}

export function parseSetCustodyConfigInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>
): ParsedSetCustodyConfigInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 3) {
    // TODO: Coded error.
    throw new Error('Not enough accounts')
  }
  let accountIndex = 0
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!
    accountIndex += 1
    return accountMeta
  }
  return {
    programAddress: instruction.programAddress,
    accounts: {
      admin: getNextAccount(),
      perpetuals: getNextAccount(),
      custody: getNextAccount(),
    },
    data: getSetCustodyConfigInstructionDataDecoder().decode(instruction.data),
  }
}
