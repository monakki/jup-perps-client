/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  transformEncoder,
  type AccountMeta,
  type AccountSignerMeta,
  type Address,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
  type Instruction,
  type InstructionWithAccounts,
  type InstructionWithData,
  type ReadonlyAccount,
  type ReadonlySignerAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
} from '@solana/kit'
import { PERPETUALS_PROGRAM_ADDRESS } from '../programs'
import { getAccountMetaFactory, type ResolvedAccount } from '../shared'

export const CLOSE_POSITION_REQUEST_DISCRIMINATOR = new Uint8Array([
  40, 105, 217, 188, 220, 45, 109, 110,
])

export function getClosePositionRequestDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    CLOSE_POSITION_REQUEST_DISCRIMINATOR
  )
}

export type ClosePositionRequestInstruction<
  TProgram extends string = typeof PERPETUALS_PROGRAM_ADDRESS,
  TAccountKeeper extends string | AccountMeta<string> = string,
  TAccountOwner extends string | AccountMeta<string> = string,
  TAccountOwnerAta extends string | AccountMeta<string> = string,
  TAccountPool extends string | AccountMeta<string> = string,
  TAccountPositionRequest extends string | AccountMeta<string> = string,
  TAccountPositionRequestAta extends string | AccountMeta<string> = string,
  TAccountPosition extends string | AccountMeta<string> = string,
  TAccountTokenProgram extends
    | string
    | AccountMeta<string> = 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA',
  TAccountEventAuthority extends string | AccountMeta<string> = string,
  TAccountProgram extends string | AccountMeta<string> = string,
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountKeeper extends string
        ? ReadonlySignerAccount<TAccountKeeper> &
            AccountSignerMeta<TAccountKeeper>
        : TAccountKeeper,
      TAccountOwner extends string
        ? WritableAccount<TAccountOwner>
        : TAccountOwner,
      TAccountOwnerAta extends string
        ? WritableAccount<TAccountOwnerAta>
        : TAccountOwnerAta,
      TAccountPool extends string
        ? WritableAccount<TAccountPool>
        : TAccountPool,
      TAccountPositionRequest extends string
        ? WritableAccount<TAccountPositionRequest>
        : TAccountPositionRequest,
      TAccountPositionRequestAta extends string
        ? WritableAccount<TAccountPositionRequestAta>
        : TAccountPositionRequestAta,
      TAccountPosition extends string
        ? ReadonlyAccount<TAccountPosition>
        : TAccountPosition,
      TAccountTokenProgram extends string
        ? ReadonlyAccount<TAccountTokenProgram>
        : TAccountTokenProgram,
      TAccountEventAuthority extends string
        ? ReadonlyAccount<TAccountEventAuthority>
        : TAccountEventAuthority,
      TAccountProgram extends string
        ? ReadonlyAccount<TAccountProgram>
        : TAccountProgram,
      ...TRemainingAccounts,
    ]
  >

export type ClosePositionRequestInstructionData = {
  discriminator: ReadonlyUint8Array
}

export type ClosePositionRequestInstructionDataArgs = {}

export function getClosePositionRequestInstructionDataEncoder(): FixedSizeEncoder<ClosePositionRequestInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([['discriminator', fixEncoderSize(getBytesEncoder(), 8)]]),
    (value) => ({
      ...value,
      discriminator: CLOSE_POSITION_REQUEST_DISCRIMINATOR,
    })
  )
}

export function getClosePositionRequestInstructionDataDecoder(): FixedSizeDecoder<ClosePositionRequestInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
  ])
}

export function getClosePositionRequestInstructionDataCodec(): FixedSizeCodec<
  ClosePositionRequestInstructionDataArgs,
  ClosePositionRequestInstructionData
> {
  return combineCodec(
    getClosePositionRequestInstructionDataEncoder(),
    getClosePositionRequestInstructionDataDecoder()
  )
}

export type ClosePositionRequestInput<
  TAccountKeeper extends string = string,
  TAccountOwner extends string = string,
  TAccountOwnerAta extends string = string,
  TAccountPool extends string = string,
  TAccountPositionRequest extends string = string,
  TAccountPositionRequestAta extends string = string,
  TAccountPosition extends string = string,
  TAccountTokenProgram extends string = string,
  TAccountEventAuthority extends string = string,
  TAccountProgram extends string = string,
> = {
  keeper?: TransactionSigner<TAccountKeeper>
  owner: Address<TAccountOwner>
  ownerAta?: Address<TAccountOwnerAta>
  pool: Address<TAccountPool>
  positionRequest: Address<TAccountPositionRequest>
  positionRequestAta: Address<TAccountPositionRequestAta>
  position: Address<TAccountPosition>
  tokenProgram?: Address<TAccountTokenProgram>
  eventAuthority: Address<TAccountEventAuthority>
  program: Address<TAccountProgram>
}

export function getClosePositionRequestInstruction<
  TAccountKeeper extends string,
  TAccountOwner extends string,
  TAccountOwnerAta extends string,
  TAccountPool extends string,
  TAccountPositionRequest extends string,
  TAccountPositionRequestAta extends string,
  TAccountPosition extends string,
  TAccountTokenProgram extends string,
  TAccountEventAuthority extends string,
  TAccountProgram extends string,
  TProgramAddress extends Address = typeof PERPETUALS_PROGRAM_ADDRESS,
>(
  input: ClosePositionRequestInput<
    TAccountKeeper,
    TAccountOwner,
    TAccountOwnerAta,
    TAccountPool,
    TAccountPositionRequest,
    TAccountPositionRequestAta,
    TAccountPosition,
    TAccountTokenProgram,
    TAccountEventAuthority,
    TAccountProgram
  >,
  config?: { programAddress?: TProgramAddress }
): ClosePositionRequestInstruction<
  TProgramAddress,
  TAccountKeeper,
  TAccountOwner,
  TAccountOwnerAta,
  TAccountPool,
  TAccountPositionRequest,
  TAccountPositionRequestAta,
  TAccountPosition,
  TAccountTokenProgram,
  TAccountEventAuthority,
  TAccountProgram
> {
  // Program address.
  const programAddress = config?.programAddress ?? PERPETUALS_PROGRAM_ADDRESS

  // Original accounts.
  const originalAccounts = {
    keeper: { value: input.keeper ?? null, isWritable: false },
    owner: { value: input.owner ?? null, isWritable: true },
    ownerAta: { value: input.ownerAta ?? null, isWritable: true },
    pool: { value: input.pool ?? null, isWritable: true },
    positionRequest: { value: input.positionRequest ?? null, isWritable: true },
    positionRequestAta: {
      value: input.positionRequestAta ?? null,
      isWritable: true,
    },
    position: { value: input.position ?? null, isWritable: false },
    tokenProgram: { value: input.tokenProgram ?? null, isWritable: false },
    eventAuthority: { value: input.eventAuthority ?? null, isWritable: false },
    program: { value: input.program ?? null, isWritable: false },
  }
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >

  // Resolve default values.
  if (!accounts.tokenProgram.value) {
    accounts.tokenProgram.value =
      'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA' as Address<'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'>
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId')
  const instruction = {
    accounts: [
      getAccountMeta(accounts.keeper),
      getAccountMeta(accounts.owner),
      getAccountMeta(accounts.ownerAta),
      getAccountMeta(accounts.pool),
      getAccountMeta(accounts.positionRequest),
      getAccountMeta(accounts.positionRequestAta),
      getAccountMeta(accounts.position),
      getAccountMeta(accounts.tokenProgram),
      getAccountMeta(accounts.eventAuthority),
      getAccountMeta(accounts.program),
    ],
    programAddress,
    data: getClosePositionRequestInstructionDataEncoder().encode({}),
  } as ClosePositionRequestInstruction<
    TProgramAddress,
    TAccountKeeper,
    TAccountOwner,
    TAccountOwnerAta,
    TAccountPool,
    TAccountPositionRequest,
    TAccountPositionRequestAta,
    TAccountPosition,
    TAccountTokenProgram,
    TAccountEventAuthority,
    TAccountProgram
  >

  return instruction
}

export type ParsedClosePositionRequestInstruction<
  TProgram extends string = typeof PERPETUALS_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> = {
  programAddress: Address<TProgram>
  accounts: {
    keeper?: TAccountMetas[0] | undefined
    owner: TAccountMetas[1]
    ownerAta?: TAccountMetas[2] | undefined
    pool: TAccountMetas[3]
    positionRequest: TAccountMetas[4]
    positionRequestAta: TAccountMetas[5]
    position: TAccountMetas[6]
    tokenProgram: TAccountMetas[7]
    eventAuthority: TAccountMetas[8]
    program: TAccountMetas[9]
  }
  data: ClosePositionRequestInstructionData
}

export function parseClosePositionRequestInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>
): ParsedClosePositionRequestInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 10) {
    // TODO: Coded error.
    throw new Error('Not enough accounts')
  }
  let accountIndex = 0
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!
    accountIndex += 1
    return accountMeta
  }
  const getNextOptionalAccount = () => {
    const accountMeta = getNextAccount()
    return accountMeta.address === PERPETUALS_PROGRAM_ADDRESS
      ? undefined
      : accountMeta
  }
  return {
    programAddress: instruction.programAddress,
    accounts: {
      keeper: getNextOptionalAccount(),
      owner: getNextAccount(),
      ownerAta: getNextOptionalAccount(),
      pool: getNextAccount(),
      positionRequest: getNextAccount(),
      positionRequestAta: getNextAccount(),
      position: getNextAccount(),
      tokenProgram: getNextAccount(),
      eventAuthority: getNextAccount(),
      program: getNextAccount(),
    },
    data: getClosePositionRequestInstructionDataDecoder().decode(
      instruction.data
    ),
  }
}
