/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBooleanDecoder,
  getBooleanEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getOptionDecoder,
  getOptionEncoder,
  getStructDecoder,
  getStructEncoder,
  getU64Decoder,
  getU64Encoder,
  transformEncoder,
  type AccountMeta,
  type AccountSignerMeta,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type Instruction,
  type InstructionWithAccounts,
  type InstructionWithData,
  type Option,
  type OptionOrNullable,
  type ReadonlyAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from '@solana/kit'
import { PERPETUALS_PROGRAM_ADDRESS } from '../programs'
import { getAccountMetaFactory, type ResolvedAccount } from '../shared'

export const CREATE_DECREASE_POSITION_MARKET_REQUEST_DISCRIMINATOR =
  new Uint8Array([74, 198, 195, 86, 193, 99, 1, 79])

export function getCreateDecreasePositionMarketRequestDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    CREATE_DECREASE_POSITION_MARKET_REQUEST_DISCRIMINATOR
  )
}

export type CreateDecreasePositionMarketRequestInstruction<
  TProgram extends string = typeof PERPETUALS_PROGRAM_ADDRESS,
  TAccountOwner extends string | AccountMeta<string> = string,
  TAccountReceivingAccount extends string | AccountMeta<string> = string,
  TAccountPerpetuals extends string | AccountMeta<string> = string,
  TAccountPool extends string | AccountMeta<string> = string,
  TAccountPosition extends string | AccountMeta<string> = string,
  TAccountPositionRequest extends string | AccountMeta<string> = string,
  TAccountPositionRequestAta extends string | AccountMeta<string> = string,
  TAccountCustody extends string | AccountMeta<string> = string,
  TAccountCollateralCustody extends string | AccountMeta<string> = string,
  TAccountDesiredMint extends string | AccountMeta<string> = string,
  TAccountReferral extends string | AccountMeta<string> = string,
  TAccountTokenProgram extends
    | string
    | AccountMeta<string> = 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA',
  TAccountAssociatedTokenProgram extends string | AccountMeta<string> = string,
  TAccountSystemProgram extends
    | string
    | AccountMeta<string> = '11111111111111111111111111111111',
  TAccountEventAuthority extends string | AccountMeta<string> = string,
  TAccountProgram extends string | AccountMeta<string> = string,
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountOwner extends string
        ? WritableSignerAccount<TAccountOwner> &
            AccountSignerMeta<TAccountOwner>
        : TAccountOwner,
      TAccountReceivingAccount extends string
        ? WritableAccount<TAccountReceivingAccount>
        : TAccountReceivingAccount,
      TAccountPerpetuals extends string
        ? ReadonlyAccount<TAccountPerpetuals>
        : TAccountPerpetuals,
      TAccountPool extends string
        ? ReadonlyAccount<TAccountPool>
        : TAccountPool,
      TAccountPosition extends string
        ? ReadonlyAccount<TAccountPosition>
        : TAccountPosition,
      TAccountPositionRequest extends string
        ? WritableAccount<TAccountPositionRequest>
        : TAccountPositionRequest,
      TAccountPositionRequestAta extends string
        ? WritableAccount<TAccountPositionRequestAta>
        : TAccountPositionRequestAta,
      TAccountCustody extends string
        ? ReadonlyAccount<TAccountCustody>
        : TAccountCustody,
      TAccountCollateralCustody extends string
        ? ReadonlyAccount<TAccountCollateralCustody>
        : TAccountCollateralCustody,
      TAccountDesiredMint extends string
        ? ReadonlyAccount<TAccountDesiredMint>
        : TAccountDesiredMint,
      TAccountReferral extends string
        ? ReadonlyAccount<TAccountReferral>
        : TAccountReferral,
      TAccountTokenProgram extends string
        ? ReadonlyAccount<TAccountTokenProgram>
        : TAccountTokenProgram,
      TAccountAssociatedTokenProgram extends string
        ? ReadonlyAccount<TAccountAssociatedTokenProgram>
        : TAccountAssociatedTokenProgram,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      TAccountEventAuthority extends string
        ? ReadonlyAccount<TAccountEventAuthority>
        : TAccountEventAuthority,
      TAccountProgram extends string
        ? ReadonlyAccount<TAccountProgram>
        : TAccountProgram,
      ...TRemainingAccounts,
    ]
  >

export type CreateDecreasePositionMarketRequestInstructionData = {
  discriminator: ReadonlyUint8Array
  collateralUsdDelta: bigint
  sizeUsdDelta: bigint
  priceSlippage: bigint
  jupiterMinimumOut: Option<bigint>
  entirePosition: Option<boolean>
  counter: bigint
}

export type CreateDecreasePositionMarketRequestInstructionDataArgs = {
  collateralUsdDelta: number | bigint
  sizeUsdDelta: number | bigint
  priceSlippage: number | bigint
  jupiterMinimumOut: OptionOrNullable<number | bigint>
  entirePosition: OptionOrNullable<boolean>
  counter: number | bigint
}

export function getCreateDecreasePositionMarketRequestInstructionDataEncoder(): Encoder<CreateDecreasePositionMarketRequestInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['collateralUsdDelta', getU64Encoder()],
      ['sizeUsdDelta', getU64Encoder()],
      ['priceSlippage', getU64Encoder()],
      ['jupiterMinimumOut', getOptionEncoder(getU64Encoder())],
      ['entirePosition', getOptionEncoder(getBooleanEncoder())],
      ['counter', getU64Encoder()],
    ]),
    (value) => ({
      ...value,
      discriminator: CREATE_DECREASE_POSITION_MARKET_REQUEST_DISCRIMINATOR,
    })
  )
}

export function getCreateDecreasePositionMarketRequestInstructionDataDecoder(): Decoder<CreateDecreasePositionMarketRequestInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['collateralUsdDelta', getU64Decoder()],
    ['sizeUsdDelta', getU64Decoder()],
    ['priceSlippage', getU64Decoder()],
    ['jupiterMinimumOut', getOptionDecoder(getU64Decoder())],
    ['entirePosition', getOptionDecoder(getBooleanDecoder())],
    ['counter', getU64Decoder()],
  ])
}

export function getCreateDecreasePositionMarketRequestInstructionDataCodec(): Codec<
  CreateDecreasePositionMarketRequestInstructionDataArgs,
  CreateDecreasePositionMarketRequestInstructionData
> {
  return combineCodec(
    getCreateDecreasePositionMarketRequestInstructionDataEncoder(),
    getCreateDecreasePositionMarketRequestInstructionDataDecoder()
  )
}

export type CreateDecreasePositionMarketRequestInput<
  TAccountOwner extends string = string,
  TAccountReceivingAccount extends string = string,
  TAccountPerpetuals extends string = string,
  TAccountPool extends string = string,
  TAccountPosition extends string = string,
  TAccountPositionRequest extends string = string,
  TAccountPositionRequestAta extends string = string,
  TAccountCustody extends string = string,
  TAccountCollateralCustody extends string = string,
  TAccountDesiredMint extends string = string,
  TAccountReferral extends string = string,
  TAccountTokenProgram extends string = string,
  TAccountAssociatedTokenProgram extends string = string,
  TAccountSystemProgram extends string = string,
  TAccountEventAuthority extends string = string,
  TAccountProgram extends string = string,
> = {
  owner: TransactionSigner<TAccountOwner>
  receivingAccount: Address<TAccountReceivingAccount>
  perpetuals: Address<TAccountPerpetuals>
  pool: Address<TAccountPool>
  position: Address<TAccountPosition>
  positionRequest: Address<TAccountPositionRequest>
  positionRequestAta: Address<TAccountPositionRequestAta>
  custody: Address<TAccountCustody>
  collateralCustody: Address<TAccountCollateralCustody>
  desiredMint: Address<TAccountDesiredMint>
  referral?: Address<TAccountReferral>
  tokenProgram?: Address<TAccountTokenProgram>
  associatedTokenProgram: Address<TAccountAssociatedTokenProgram>
  systemProgram?: Address<TAccountSystemProgram>
  eventAuthority: Address<TAccountEventAuthority>
  program: Address<TAccountProgram>
  collateralUsdDelta: CreateDecreasePositionMarketRequestInstructionDataArgs['collateralUsdDelta']
  sizeUsdDelta: CreateDecreasePositionMarketRequestInstructionDataArgs['sizeUsdDelta']
  priceSlippage: CreateDecreasePositionMarketRequestInstructionDataArgs['priceSlippage']
  jupiterMinimumOut: CreateDecreasePositionMarketRequestInstructionDataArgs['jupiterMinimumOut']
  entirePosition: CreateDecreasePositionMarketRequestInstructionDataArgs['entirePosition']
  counter: CreateDecreasePositionMarketRequestInstructionDataArgs['counter']
}

export function getCreateDecreasePositionMarketRequestInstruction<
  TAccountOwner extends string,
  TAccountReceivingAccount extends string,
  TAccountPerpetuals extends string,
  TAccountPool extends string,
  TAccountPosition extends string,
  TAccountPositionRequest extends string,
  TAccountPositionRequestAta extends string,
  TAccountCustody extends string,
  TAccountCollateralCustody extends string,
  TAccountDesiredMint extends string,
  TAccountReferral extends string,
  TAccountTokenProgram extends string,
  TAccountAssociatedTokenProgram extends string,
  TAccountSystemProgram extends string,
  TAccountEventAuthority extends string,
  TAccountProgram extends string,
  TProgramAddress extends Address = typeof PERPETUALS_PROGRAM_ADDRESS,
>(
  input: CreateDecreasePositionMarketRequestInput<
    TAccountOwner,
    TAccountReceivingAccount,
    TAccountPerpetuals,
    TAccountPool,
    TAccountPosition,
    TAccountPositionRequest,
    TAccountPositionRequestAta,
    TAccountCustody,
    TAccountCollateralCustody,
    TAccountDesiredMint,
    TAccountReferral,
    TAccountTokenProgram,
    TAccountAssociatedTokenProgram,
    TAccountSystemProgram,
    TAccountEventAuthority,
    TAccountProgram
  >,
  config?: { programAddress?: TProgramAddress }
): CreateDecreasePositionMarketRequestInstruction<
  TProgramAddress,
  TAccountOwner,
  TAccountReceivingAccount,
  TAccountPerpetuals,
  TAccountPool,
  TAccountPosition,
  TAccountPositionRequest,
  TAccountPositionRequestAta,
  TAccountCustody,
  TAccountCollateralCustody,
  TAccountDesiredMint,
  TAccountReferral,
  TAccountTokenProgram,
  TAccountAssociatedTokenProgram,
  TAccountSystemProgram,
  TAccountEventAuthority,
  TAccountProgram
> {
  // Program address.
  const programAddress = config?.programAddress ?? PERPETUALS_PROGRAM_ADDRESS

  // Original accounts.
  const originalAccounts = {
    owner: { value: input.owner ?? null, isWritable: true },
    receivingAccount: {
      value: input.receivingAccount ?? null,
      isWritable: true,
    },
    perpetuals: { value: input.perpetuals ?? null, isWritable: false },
    pool: { value: input.pool ?? null, isWritable: false },
    position: { value: input.position ?? null, isWritable: false },
    positionRequest: { value: input.positionRequest ?? null, isWritable: true },
    positionRequestAta: {
      value: input.positionRequestAta ?? null,
      isWritable: true,
    },
    custody: { value: input.custody ?? null, isWritable: false },
    collateralCustody: {
      value: input.collateralCustody ?? null,
      isWritable: false,
    },
    desiredMint: { value: input.desiredMint ?? null, isWritable: false },
    referral: { value: input.referral ?? null, isWritable: false },
    tokenProgram: { value: input.tokenProgram ?? null, isWritable: false },
    associatedTokenProgram: {
      value: input.associatedTokenProgram ?? null,
      isWritable: false,
    },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
    eventAuthority: { value: input.eventAuthority ?? null, isWritable: false },
    program: { value: input.program ?? null, isWritable: false },
  }
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >

  // Original args.
  const args = { ...input }

  // Resolve default values.
  if (!accounts.tokenProgram.value) {
    accounts.tokenProgram.value =
      'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA' as Address<'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'>
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId')
  const instruction = {
    accounts: [
      getAccountMeta(accounts.owner),
      getAccountMeta(accounts.receivingAccount),
      getAccountMeta(accounts.perpetuals),
      getAccountMeta(accounts.pool),
      getAccountMeta(accounts.position),
      getAccountMeta(accounts.positionRequest),
      getAccountMeta(accounts.positionRequestAta),
      getAccountMeta(accounts.custody),
      getAccountMeta(accounts.collateralCustody),
      getAccountMeta(accounts.desiredMint),
      getAccountMeta(accounts.referral),
      getAccountMeta(accounts.tokenProgram),
      getAccountMeta(accounts.associatedTokenProgram),
      getAccountMeta(accounts.systemProgram),
      getAccountMeta(accounts.eventAuthority),
      getAccountMeta(accounts.program),
    ],
    programAddress,
    data: getCreateDecreasePositionMarketRequestInstructionDataEncoder().encode(
      args as CreateDecreasePositionMarketRequestInstructionDataArgs
    ),
  } as CreateDecreasePositionMarketRequestInstruction<
    TProgramAddress,
    TAccountOwner,
    TAccountReceivingAccount,
    TAccountPerpetuals,
    TAccountPool,
    TAccountPosition,
    TAccountPositionRequest,
    TAccountPositionRequestAta,
    TAccountCustody,
    TAccountCollateralCustody,
    TAccountDesiredMint,
    TAccountReferral,
    TAccountTokenProgram,
    TAccountAssociatedTokenProgram,
    TAccountSystemProgram,
    TAccountEventAuthority,
    TAccountProgram
  >

  return instruction
}

export type ParsedCreateDecreasePositionMarketRequestInstruction<
  TProgram extends string = typeof PERPETUALS_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> = {
  programAddress: Address<TProgram>
  accounts: {
    owner: TAccountMetas[0]
    receivingAccount: TAccountMetas[1]
    perpetuals: TAccountMetas[2]
    pool: TAccountMetas[3]
    position: TAccountMetas[4]
    positionRequest: TAccountMetas[5]
    positionRequestAta: TAccountMetas[6]
    custody: TAccountMetas[7]
    collateralCustody: TAccountMetas[8]
    desiredMint: TAccountMetas[9]
    referral?: TAccountMetas[10] | undefined
    tokenProgram: TAccountMetas[11]
    associatedTokenProgram: TAccountMetas[12]
    systemProgram: TAccountMetas[13]
    eventAuthority: TAccountMetas[14]
    program: TAccountMetas[15]
  }
  data: CreateDecreasePositionMarketRequestInstructionData
}

export function parseCreateDecreasePositionMarketRequestInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>
): ParsedCreateDecreasePositionMarketRequestInstruction<
  TProgram,
  TAccountMetas
> {
  if (instruction.accounts.length < 16) {
    // TODO: Coded error.
    throw new Error('Not enough accounts')
  }
  let accountIndex = 0
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!
    accountIndex += 1
    return accountMeta
  }
  const getNextOptionalAccount = () => {
    const accountMeta = getNextAccount()
    return accountMeta.address === PERPETUALS_PROGRAM_ADDRESS
      ? undefined
      : accountMeta
  }
  return {
    programAddress: instruction.programAddress,
    accounts: {
      owner: getNextAccount(),
      receivingAccount: getNextAccount(),
      perpetuals: getNextAccount(),
      pool: getNextAccount(),
      position: getNextAccount(),
      positionRequest: getNextAccount(),
      positionRequestAta: getNextAccount(),
      custody: getNextAccount(),
      collateralCustody: getNextAccount(),
      desiredMint: getNextAccount(),
      referral: getNextOptionalAccount(),
      tokenProgram: getNextAccount(),
      associatedTokenProgram: getNextAccount(),
      systemProgram: getNextAccount(),
      eventAuthority: getNextAccount(),
      program: getNextAccount(),
    },
    data: getCreateDecreasePositionMarketRequestInstructionDataDecoder().decode(
      instruction.data
    ),
  }
}
