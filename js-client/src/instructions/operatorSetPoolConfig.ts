/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getI64Decoder,
  getI64Encoder,
  getStructDecoder,
  getStructEncoder,
  transformEncoder,
  type AccountMeta,
  type AccountSignerMeta,
  type Address,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
  type Instruction,
  type InstructionWithAccounts,
  type InstructionWithData,
  type ReadonlySignerAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
} from '@solana/kit'
import { PERPETUALS_PROGRAM_ADDRESS } from '../programs'
import { getAccountMetaFactory, type ResolvedAccount } from '../shared'
import {
  getFeesDecoder,
  getFeesEncoder,
  getLimitDecoder,
  getLimitEncoder,
  type Fees,
  type FeesArgs,
  type Limit,
  type LimitArgs,
} from '../types'

export const OPERATOR_SET_POOL_CONFIG_DISCRIMINATOR = new Uint8Array([
  76, 201, 80, 18, 199, 92, 246, 105,
])

export function getOperatorSetPoolConfigDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    OPERATOR_SET_POOL_CONFIG_DISCRIMINATOR
  )
}

export type OperatorSetPoolConfigInstruction<
  TProgram extends string = typeof PERPETUALS_PROGRAM_ADDRESS,
  TAccountOperator extends string | AccountMeta<string> = string,
  TAccountPool extends string | AccountMeta<string> = string,
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountOperator extends string
        ? ReadonlySignerAccount<TAccountOperator> &
            AccountSignerMeta<TAccountOperator>
        : TAccountOperator,
      TAccountPool extends string
        ? WritableAccount<TAccountPool>
        : TAccountPool,
      ...TRemainingAccounts,
    ]
  >

export type OperatorSetPoolConfigInstructionData = {
  discriminator: ReadonlyUint8Array
  fees: Fees
  limit: Limit
  maxRequestExecutionSec: bigint
}

export type OperatorSetPoolConfigInstructionDataArgs = {
  fees: FeesArgs
  limit: LimitArgs
  maxRequestExecutionSec: number | bigint
}

export function getOperatorSetPoolConfigInstructionDataEncoder(): FixedSizeEncoder<OperatorSetPoolConfigInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['fees', getFeesEncoder()],
      ['limit', getLimitEncoder()],
      ['maxRequestExecutionSec', getI64Encoder()],
    ]),
    (value) => ({
      ...value,
      discriminator: OPERATOR_SET_POOL_CONFIG_DISCRIMINATOR,
    })
  )
}

export function getOperatorSetPoolConfigInstructionDataDecoder(): FixedSizeDecoder<OperatorSetPoolConfigInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['fees', getFeesDecoder()],
    ['limit', getLimitDecoder()],
    ['maxRequestExecutionSec', getI64Decoder()],
  ])
}

export function getOperatorSetPoolConfigInstructionDataCodec(): FixedSizeCodec<
  OperatorSetPoolConfigInstructionDataArgs,
  OperatorSetPoolConfigInstructionData
> {
  return combineCodec(
    getOperatorSetPoolConfigInstructionDataEncoder(),
    getOperatorSetPoolConfigInstructionDataDecoder()
  )
}

export type OperatorSetPoolConfigInput<
  TAccountOperator extends string = string,
  TAccountPool extends string = string,
> = {
  operator: TransactionSigner<TAccountOperator>
  pool: Address<TAccountPool>
  fees: OperatorSetPoolConfigInstructionDataArgs['fees']
  limit: OperatorSetPoolConfigInstructionDataArgs['limit']
  maxRequestExecutionSec: OperatorSetPoolConfigInstructionDataArgs['maxRequestExecutionSec']
}

export function getOperatorSetPoolConfigInstruction<
  TAccountOperator extends string,
  TAccountPool extends string,
  TProgramAddress extends Address = typeof PERPETUALS_PROGRAM_ADDRESS,
>(
  input: OperatorSetPoolConfigInput<TAccountOperator, TAccountPool>,
  config?: { programAddress?: TProgramAddress }
): OperatorSetPoolConfigInstruction<
  TProgramAddress,
  TAccountOperator,
  TAccountPool
> {
  // Program address.
  const programAddress = config?.programAddress ?? PERPETUALS_PROGRAM_ADDRESS

  // Original accounts.
  const originalAccounts = {
    operator: { value: input.operator ?? null, isWritable: false },
    pool: { value: input.pool ?? null, isWritable: true },
  }
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >

  // Original args.
  const args = { ...input }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId')
  const instruction = {
    accounts: [
      getAccountMeta(accounts.operator),
      getAccountMeta(accounts.pool),
    ],
    programAddress,
    data: getOperatorSetPoolConfigInstructionDataEncoder().encode(
      args as OperatorSetPoolConfigInstructionDataArgs
    ),
  } as OperatorSetPoolConfigInstruction<
    TProgramAddress,
    TAccountOperator,
    TAccountPool
  >

  return instruction
}

export type ParsedOperatorSetPoolConfigInstruction<
  TProgram extends string = typeof PERPETUALS_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> = {
  programAddress: Address<TProgram>
  accounts: {
    operator: TAccountMetas[0]
    pool: TAccountMetas[1]
  }
  data: OperatorSetPoolConfigInstructionData
}

export function parseOperatorSetPoolConfigInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>
): ParsedOperatorSetPoolConfigInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 2) {
    // TODO: Coded error.
    throw new Error('Not enough accounts')
  }
  let accountIndex = 0
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!
    accountIndex += 1
    return accountMeta
  }
  return {
    programAddress: instruction.programAddress,
    accounts: {
      operator: getNextAccount(),
      pool: getNextAccount(),
    },
    data: getOperatorSetPoolConfigInstructionDataDecoder().decode(
      instruction.data
    ),
  }
}
