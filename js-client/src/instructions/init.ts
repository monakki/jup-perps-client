/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBooleanDecoder,
  getBooleanEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  transformEncoder,
  type AccountMeta,
  type AccountSignerMeta,
  type Address,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
  type Instruction,
  type InstructionWithAccounts,
  type InstructionWithData,
  type ReadonlyAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from '@solana/kit'
import { PERPETUALS_PROGRAM_ADDRESS } from '../programs'
import { getAccountMetaFactory, type ResolvedAccount } from '../shared'

export const INIT_DISCRIMINATOR = new Uint8Array([
  220, 59, 207, 236, 108, 250, 47, 100,
])

export function getInitDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(INIT_DISCRIMINATOR)
}

export type InitInstruction<
  TProgram extends string = typeof PERPETUALS_PROGRAM_ADDRESS,
  TAccountUpgradeAuthority extends string | AccountMeta<string> = string,
  TAccountAdmin extends string | AccountMeta<string> = string,
  TAccountTransferAuthority extends string | AccountMeta<string> = string,
  TAccountPerpetuals extends string | AccountMeta<string> = string,
  TAccountPerpetualsProgram extends string | AccountMeta<string> = string,
  TAccountPerpetualsProgramData extends string | AccountMeta<string> = string,
  TAccountSystemProgram extends
    | string
    | AccountMeta<string> = '11111111111111111111111111111111',
  TAccountTokenProgram extends
    | string
    | AccountMeta<string> = 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA',
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountUpgradeAuthority extends string
        ? WritableSignerAccount<TAccountUpgradeAuthority> &
            AccountSignerMeta<TAccountUpgradeAuthority>
        : TAccountUpgradeAuthority,
      TAccountAdmin extends string
        ? ReadonlyAccount<TAccountAdmin>
        : TAccountAdmin,
      TAccountTransferAuthority extends string
        ? WritableAccount<TAccountTransferAuthority>
        : TAccountTransferAuthority,
      TAccountPerpetuals extends string
        ? WritableAccount<TAccountPerpetuals>
        : TAccountPerpetuals,
      TAccountPerpetualsProgram extends string
        ? ReadonlyAccount<TAccountPerpetualsProgram>
        : TAccountPerpetualsProgram,
      TAccountPerpetualsProgramData extends string
        ? ReadonlyAccount<TAccountPerpetualsProgramData>
        : TAccountPerpetualsProgramData,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      TAccountTokenProgram extends string
        ? ReadonlyAccount<TAccountTokenProgram>
        : TAccountTokenProgram,
      ...TRemainingAccounts,
    ]
  >

export type InitInstructionData = {
  discriminator: ReadonlyUint8Array
  allowSwap: boolean
  allowAddLiquidity: boolean
  allowRemoveLiquidity: boolean
  allowIncreasePosition: boolean
  allowDecreasePosition: boolean
  allowCollateralWithdrawal: boolean
  allowLiquidatePosition: boolean
}

export type InitInstructionDataArgs = {
  allowSwap: boolean
  allowAddLiquidity: boolean
  allowRemoveLiquidity: boolean
  allowIncreasePosition: boolean
  allowDecreasePosition: boolean
  allowCollateralWithdrawal: boolean
  allowLiquidatePosition: boolean
}

export function getInitInstructionDataEncoder(): FixedSizeEncoder<InitInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['allowSwap', getBooleanEncoder()],
      ['allowAddLiquidity', getBooleanEncoder()],
      ['allowRemoveLiquidity', getBooleanEncoder()],
      ['allowIncreasePosition', getBooleanEncoder()],
      ['allowDecreasePosition', getBooleanEncoder()],
      ['allowCollateralWithdrawal', getBooleanEncoder()],
      ['allowLiquidatePosition', getBooleanEncoder()],
    ]),
    (value) => ({ ...value, discriminator: INIT_DISCRIMINATOR })
  )
}

export function getInitInstructionDataDecoder(): FixedSizeDecoder<InitInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['allowSwap', getBooleanDecoder()],
    ['allowAddLiquidity', getBooleanDecoder()],
    ['allowRemoveLiquidity', getBooleanDecoder()],
    ['allowIncreasePosition', getBooleanDecoder()],
    ['allowDecreasePosition', getBooleanDecoder()],
    ['allowCollateralWithdrawal', getBooleanDecoder()],
    ['allowLiquidatePosition', getBooleanDecoder()],
  ])
}

export function getInitInstructionDataCodec(): FixedSizeCodec<
  InitInstructionDataArgs,
  InitInstructionData
> {
  return combineCodec(
    getInitInstructionDataEncoder(),
    getInitInstructionDataDecoder()
  )
}

export type InitInput<
  TAccountUpgradeAuthority extends string = string,
  TAccountAdmin extends string = string,
  TAccountTransferAuthority extends string = string,
  TAccountPerpetuals extends string = string,
  TAccountPerpetualsProgram extends string = string,
  TAccountPerpetualsProgramData extends string = string,
  TAccountSystemProgram extends string = string,
  TAccountTokenProgram extends string = string,
> = {
  upgradeAuthority: TransactionSigner<TAccountUpgradeAuthority>
  admin: Address<TAccountAdmin>
  transferAuthority: Address<TAccountTransferAuthority>
  perpetuals: Address<TAccountPerpetuals>
  perpetualsProgram: Address<TAccountPerpetualsProgram>
  perpetualsProgramData: Address<TAccountPerpetualsProgramData>
  systemProgram?: Address<TAccountSystemProgram>
  tokenProgram?: Address<TAccountTokenProgram>
  allowSwap: InitInstructionDataArgs['allowSwap']
  allowAddLiquidity: InitInstructionDataArgs['allowAddLiquidity']
  allowRemoveLiquidity: InitInstructionDataArgs['allowRemoveLiquidity']
  allowIncreasePosition: InitInstructionDataArgs['allowIncreasePosition']
  allowDecreasePosition: InitInstructionDataArgs['allowDecreasePosition']
  allowCollateralWithdrawal: InitInstructionDataArgs['allowCollateralWithdrawal']
  allowLiquidatePosition: InitInstructionDataArgs['allowLiquidatePosition']
}

export function getInitInstruction<
  TAccountUpgradeAuthority extends string,
  TAccountAdmin extends string,
  TAccountTransferAuthority extends string,
  TAccountPerpetuals extends string,
  TAccountPerpetualsProgram extends string,
  TAccountPerpetualsProgramData extends string,
  TAccountSystemProgram extends string,
  TAccountTokenProgram extends string,
  TProgramAddress extends Address = typeof PERPETUALS_PROGRAM_ADDRESS,
>(
  input: InitInput<
    TAccountUpgradeAuthority,
    TAccountAdmin,
    TAccountTransferAuthority,
    TAccountPerpetuals,
    TAccountPerpetualsProgram,
    TAccountPerpetualsProgramData,
    TAccountSystemProgram,
    TAccountTokenProgram
  >,
  config?: { programAddress?: TProgramAddress }
): InitInstruction<
  TProgramAddress,
  TAccountUpgradeAuthority,
  TAccountAdmin,
  TAccountTransferAuthority,
  TAccountPerpetuals,
  TAccountPerpetualsProgram,
  TAccountPerpetualsProgramData,
  TAccountSystemProgram,
  TAccountTokenProgram
> {
  // Program address.
  const programAddress = config?.programAddress ?? PERPETUALS_PROGRAM_ADDRESS

  // Original accounts.
  const originalAccounts = {
    upgradeAuthority: {
      value: input.upgradeAuthority ?? null,
      isWritable: true,
    },
    admin: { value: input.admin ?? null, isWritable: false },
    transferAuthority: {
      value: input.transferAuthority ?? null,
      isWritable: true,
    },
    perpetuals: { value: input.perpetuals ?? null, isWritable: true },
    perpetualsProgram: {
      value: input.perpetualsProgram ?? null,
      isWritable: false,
    },
    perpetualsProgramData: {
      value: input.perpetualsProgramData ?? null,
      isWritable: false,
    },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
    tokenProgram: { value: input.tokenProgram ?? null, isWritable: false },
  }
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >

  // Original args.
  const args = { ...input }

  // Resolve default values.
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>
  }
  if (!accounts.tokenProgram.value) {
    accounts.tokenProgram.value =
      'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA' as Address<'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'>
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId')
  const instruction = {
    accounts: [
      getAccountMeta(accounts.upgradeAuthority),
      getAccountMeta(accounts.admin),
      getAccountMeta(accounts.transferAuthority),
      getAccountMeta(accounts.perpetuals),
      getAccountMeta(accounts.perpetualsProgram),
      getAccountMeta(accounts.perpetualsProgramData),
      getAccountMeta(accounts.systemProgram),
      getAccountMeta(accounts.tokenProgram),
    ],
    programAddress,
    data: getInitInstructionDataEncoder().encode(
      args as InitInstructionDataArgs
    ),
  } as InitInstruction<
    TProgramAddress,
    TAccountUpgradeAuthority,
    TAccountAdmin,
    TAccountTransferAuthority,
    TAccountPerpetuals,
    TAccountPerpetualsProgram,
    TAccountPerpetualsProgramData,
    TAccountSystemProgram,
    TAccountTokenProgram
  >

  return instruction
}

export type ParsedInitInstruction<
  TProgram extends string = typeof PERPETUALS_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> = {
  programAddress: Address<TProgram>
  accounts: {
    upgradeAuthority: TAccountMetas[0]
    admin: TAccountMetas[1]
    transferAuthority: TAccountMetas[2]
    perpetuals: TAccountMetas[3]
    perpetualsProgram: TAccountMetas[4]
    perpetualsProgramData: TAccountMetas[5]
    systemProgram: TAccountMetas[6]
    tokenProgram: TAccountMetas[7]
  }
  data: InitInstructionData
}

export function parseInitInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>
): ParsedInitInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 8) {
    // TODO: Coded error.
    throw new Error('Not enough accounts')
  }
  let accountIndex = 0
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!
    accountIndex += 1
    return accountMeta
  }
  return {
    programAddress: instruction.programAddress,
    accounts: {
      upgradeAuthority: getNextAccount(),
      admin: getNextAccount(),
      transferAuthority: getNextAccount(),
      perpetuals: getNextAccount(),
      perpetualsProgram: getNextAccount(),
      perpetualsProgramData: getNextAccount(),
      systemProgram: getNextAccount(),
      tokenProgram: getNextAccount(),
    },
    data: getInitInstructionDataDecoder().decode(instruction.data),
  }
}
