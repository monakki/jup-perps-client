/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  containsBytes,
  fixEncoderSize,
  getBytesEncoder,
  type Address,
  type ReadonlyUint8Array,
} from '@solana/kit'
import {
  type ParsedAddCustodyInstruction,
  type ParsedAddLiquidity2Instruction,
  type ParsedAddPoolInstruction,
  type ParsedClosePositionRequestInstruction,
  type ParsedCreateDecreasePositionMarketRequestInstruction,
  type ParsedCreateDecreasePositionRequest2Instruction,
  type ParsedCreateIncreasePositionMarketRequestInstruction,
  type ParsedCreateTokenLedgerInstruction,
  type ParsedCreateTokenMetadataInstruction,
  type ParsedDecreasePosition4Instruction,
  type ParsedDecreasePositionWithInternalSwapInstruction,
  type ParsedGetAddLiquidityAmountAndFee2Instruction,
  type ParsedGetAssetsUnderManagement2Instruction,
  type ParsedGetRemoveLiquidityAmountAndFee2Instruction,
  type ParsedIncreasePosition4Instruction,
  type ParsedIncreasePositionPreSwapInstruction,
  type ParsedIncreasePositionWithInternalSwapInstruction,
  type ParsedInitInstruction,
  type ParsedInstantCreateLimitOrderInstruction,
  type ParsedInstantCreateTpslInstruction,
  type ParsedInstantDecreasePositionInstruction,
  type ParsedInstantIncreasePositionInstruction,
  type ParsedInstantUpdateLimitOrderInstruction,
  type ParsedInstantUpdateTpslInstruction,
  type ParsedLiquidateFullPosition4Instruction,
  type ParsedOperatorSetCustodyConfigInstruction,
  type ParsedOperatorSetPoolConfigInstruction,
  type ParsedReallocCustodyInstruction,
  type ParsedReallocPoolInstruction,
  type ParsedRefreshAssetsUnderManagementInstruction,
  type ParsedRemoveLiquidity2Instruction,
  type ParsedSetCustodyConfigInstruction,
  type ParsedSetPerpetualsConfigInstruction,
  type ParsedSetPoolConfigInstruction,
  type ParsedSetTestTimeInstruction,
  type ParsedSetTokenLedgerInstruction,
  type ParsedSwap2Instruction,
  type ParsedTestInitInstruction,
  type ParsedTransferAdminInstruction,
  type ParsedUpdateDecreasePositionRequest2Instruction,
  type ParsedWithdrawFees2Instruction,
} from '../instructions'

export const PERPETUALS_PROGRAM_ADDRESS =
  'PERPHjGBqRHArX4DySjwM6UJHiR3sWAatqfdBS2qQJu' as Address<'PERPHjGBqRHArX4DySjwM6UJHiR3sWAatqfdBS2qQJu'>

export enum PerpetualsAccount {
  Custody,
  Perpetuals,
  Pool,
  PositionRequest,
  Position,
  TokenLedger,
}

export function identifyPerpetualsAccount(
  account: { data: ReadonlyUint8Array } | ReadonlyUint8Array
): PerpetualsAccount {
  const data = 'data' in account ? account.data : account
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([1, 184, 48, 81, 93, 131, 63, 145])
      ),
      0
    )
  ) {
    return PerpetualsAccount.Custody
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([28, 167, 98, 191, 104, 82, 108, 196])
      ),
      0
    )
  ) {
    return PerpetualsAccount.Perpetuals
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([241, 154, 109, 4, 17, 177, 109, 188])
      ),
      0
    )
  ) {
    return PerpetualsAccount.Pool
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([12, 38, 250, 199, 46, 154, 32, 216])
      ),
      0
    )
  ) {
    return PerpetualsAccount.PositionRequest
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([170, 188, 143, 228, 122, 64, 247, 208])
      ),
      0
    )
  ) {
    return PerpetualsAccount.Position
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([156, 247, 9, 188, 54, 108, 85, 77])
      ),
      0
    )
  ) {
    return PerpetualsAccount.TokenLedger
  }
  throw new Error(
    'The provided account could not be identified as a perpetuals account.'
  )
}

export enum PerpetualsInstruction {
  Init,
  AddPool,
  AddCustody,
  SetCustodyConfig,
  SetPoolConfig,
  SetPerpetualsConfig,
  TransferAdmin,
  WithdrawFees2,
  CreateTokenMetadata,
  CreateTokenLedger,
  ReallocCustody,
  ReallocPool,
  OperatorSetCustodyConfig,
  OperatorSetPoolConfig,
  TestInit,
  SetTestTime,
  SetTokenLedger,
  Swap2,
  AddLiquidity2,
  RemoveLiquidity2,
  CreateIncreasePositionMarketRequest,
  CreateDecreasePositionRequest2,
  CreateDecreasePositionMarketRequest,
  UpdateDecreasePositionRequest2,
  ClosePositionRequest,
  IncreasePosition4,
  IncreasePositionPreSwap,
  IncreasePositionWithInternalSwap,
  DecreasePosition4,
  DecreasePositionWithInternalSwap,
  LiquidateFullPosition4,
  RefreshAssetsUnderManagement,
  InstantCreateTpsl,
  InstantCreateLimitOrder,
  InstantIncreasePosition,
  InstantDecreasePosition,
  InstantUpdateLimitOrder,
  InstantUpdateTpsl,
  GetAddLiquidityAmountAndFee2,
  GetRemoveLiquidityAmountAndFee2,
  GetAssetsUnderManagement2,
}

export function identifyPerpetualsInstruction(
  instruction: { data: ReadonlyUint8Array } | ReadonlyUint8Array
): PerpetualsInstruction {
  const data = 'data' in instruction ? instruction.data : instruction
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([220, 59, 207, 236, 108, 250, 47, 100])
      ),
      0
    )
  ) {
    return PerpetualsInstruction.Init
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([115, 230, 212, 211, 175, 49, 39, 169])
      ),
      0
    )
  ) {
    return PerpetualsInstruction.AddPool
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([247, 254, 126, 17, 26, 6, 215, 117])
      ),
      0
    )
  ) {
    return PerpetualsInstruction.AddCustody
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([133, 97, 130, 143, 215, 229, 36, 176])
      ),
      0
    )
  ) {
    return PerpetualsInstruction.SetCustodyConfig
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([216, 87, 65, 125, 113, 110, 185, 120])
      ),
      0
    )
  ) {
    return PerpetualsInstruction.SetPoolConfig
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([80, 72, 21, 191, 29, 121, 45, 111])
      ),
      0
    )
  ) {
    return PerpetualsInstruction.SetPerpetualsConfig
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([42, 242, 66, 106, 228, 10, 111, 156])
      ),
      0
    )
  ) {
    return PerpetualsInstruction.TransferAdmin
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([252, 128, 143, 145, 225, 221, 159, 207])
      ),
      0
    )
  ) {
    return PerpetualsInstruction.WithdrawFees2
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([221, 80, 176, 37, 153, 188, 160, 68])
      ),
      0
    )
  ) {
    return PerpetualsInstruction.CreateTokenMetadata
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([232, 242, 197, 253, 240, 143, 129, 52])
      ),
      0
    )
  ) {
    return PerpetualsInstruction.CreateTokenLedger
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([123, 58, 109, 139, 133, 7, 225, 200])
      ),
      0
    )
  ) {
    return PerpetualsInstruction.ReallocCustody
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([114, 128, 37, 167, 71, 227, 40, 178])
      ),
      0
    )
  ) {
    return PerpetualsInstruction.ReallocPool
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([166, 137, 92, 204, 145, 224, 24, 218])
      ),
      0
    )
  ) {
    return PerpetualsInstruction.OperatorSetCustodyConfig
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([76, 201, 80, 18, 199, 92, 246, 105])
      ),
      0
    )
  ) {
    return PerpetualsInstruction.OperatorSetPoolConfig
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([48, 51, 92, 122, 81, 19, 112, 41])
      ),
      0
    )
  ) {
    return PerpetualsInstruction.TestInit
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([242, 231, 177, 251, 126, 145, 159, 104])
      ),
      0
    )
  ) {
    return PerpetualsInstruction.SetTestTime
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([228, 85, 185, 112, 78, 79, 77, 2])
      ),
      0
    )
  ) {
    return PerpetualsInstruction.SetTokenLedger
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([65, 75, 63, 76, 235, 91, 91, 136])
      ),
      0
    )
  ) {
    return PerpetualsInstruction.Swap2
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([228, 162, 78, 28, 70, 219, 116, 115])
      ),
      0
    )
  ) {
    return PerpetualsInstruction.AddLiquidity2
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([230, 215, 82, 127, 241, 101, 227, 146])
      ),
      0
    )
  ) {
    return PerpetualsInstruction.RemoveLiquidity2
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([184, 85, 199, 24, 105, 171, 156, 56])
      ),
      0
    )
  ) {
    return PerpetualsInstruction.CreateIncreasePositionMarketRequest
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([105, 64, 201, 82, 250, 14, 109, 77])
      ),
      0
    )
  ) {
    return PerpetualsInstruction.CreateDecreasePositionRequest2
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([74, 198, 195, 86, 193, 99, 1, 79])
      ),
      0
    )
  ) {
    return PerpetualsInstruction.CreateDecreasePositionMarketRequest
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([144, 200, 249, 255, 108, 217, 249, 116])
      ),
      0
    )
  ) {
    return PerpetualsInstruction.UpdateDecreasePositionRequest2
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([40, 105, 217, 188, 220, 45, 109, 110])
      ),
      0
    )
  ) {
    return PerpetualsInstruction.ClosePositionRequest
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([67, 147, 53, 23, 43, 57, 16, 67])
      ),
      0
    )
  ) {
    return PerpetualsInstruction.IncreasePosition4
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([26, 136, 225, 217, 22, 21, 83, 20])
      ),
      0
    )
  ) {
    return PerpetualsInstruction.IncreasePositionPreSwap
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([114, 55, 106, 140, 199, 221, 32, 112])
      ),
      0
    )
  ) {
    return PerpetualsInstruction.IncreasePositionWithInternalSwap
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([185, 161, 114, 175, 96, 148, 3, 170])
      ),
      0
    )
  ) {
    return PerpetualsInstruction.DecreasePosition4
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([131, 17, 153, 110, 119, 100, 97, 38])
      ),
      0
    )
  ) {
    return PerpetualsInstruction.DecreasePositionWithInternalSwap
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([64, 176, 88, 51, 168, 188, 156, 175])
      ),
      0
    )
  ) {
    return PerpetualsInstruction.LiquidateFullPosition4
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([162, 0, 215, 55, 225, 15, 185, 0])
      ),
      0
    )
  ) {
    return PerpetualsInstruction.RefreshAssetsUnderManagement
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([117, 98, 66, 127, 30, 50, 73, 185])
      ),
      0
    )
  ) {
    return PerpetualsInstruction.InstantCreateTpsl
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([194, 37, 195, 123, 40, 127, 126, 156])
      ),
      0
    )
  ) {
    return PerpetualsInstruction.InstantCreateLimitOrder
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([164, 126, 68, 182, 223, 166, 64, 183])
      ),
      0
    )
  ) {
    return PerpetualsInstruction.InstantIncreasePosition
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([46, 23, 240, 44, 30, 138, 94, 140])
      ),
      0
    )
  ) {
    return PerpetualsInstruction.InstantDecreasePosition
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([136, 245, 229, 58, 121, 141, 12, 207])
      ),
      0
    )
  ) {
    return PerpetualsInstruction.InstantUpdateLimitOrder
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([144, 228, 114, 37, 165, 242, 111, 101])
      ),
      0
    )
  ) {
    return PerpetualsInstruction.InstantUpdateTpsl
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([109, 157, 55, 169, 8, 81, 4, 118])
      ),
      0
    )
  ) {
    return PerpetualsInstruction.GetAddLiquidityAmountAndFee2
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([183, 59, 72, 110, 223, 243, 150, 142])
      ),
      0
    )
  ) {
    return PerpetualsInstruction.GetRemoveLiquidityAmountAndFee2
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([193, 210, 13, 249, 113, 149, 29, 84])
      ),
      0
    )
  ) {
    return PerpetualsInstruction.GetAssetsUnderManagement2
  }
  throw new Error(
    'The provided instruction could not be identified as a perpetuals instruction.'
  )
}

export type ParsedPerpetualsInstruction<
  TProgram extends string = 'PERPHjGBqRHArX4DySjwM6UJHiR3sWAatqfdBS2qQJu',
> =
  | ({
      instructionType: PerpetualsInstruction.Init
    } & ParsedInitInstruction<TProgram>)
  | ({
      instructionType: PerpetualsInstruction.AddPool
    } & ParsedAddPoolInstruction<TProgram>)
  | ({
      instructionType: PerpetualsInstruction.AddCustody
    } & ParsedAddCustodyInstruction<TProgram>)
  | ({
      instructionType: PerpetualsInstruction.SetCustodyConfig
    } & ParsedSetCustodyConfigInstruction<TProgram>)
  | ({
      instructionType: PerpetualsInstruction.SetPoolConfig
    } & ParsedSetPoolConfigInstruction<TProgram>)
  | ({
      instructionType: PerpetualsInstruction.SetPerpetualsConfig
    } & ParsedSetPerpetualsConfigInstruction<TProgram>)
  | ({
      instructionType: PerpetualsInstruction.TransferAdmin
    } & ParsedTransferAdminInstruction<TProgram>)
  | ({
      instructionType: PerpetualsInstruction.WithdrawFees2
    } & ParsedWithdrawFees2Instruction<TProgram>)
  | ({
      instructionType: PerpetualsInstruction.CreateTokenMetadata
    } & ParsedCreateTokenMetadataInstruction<TProgram>)
  | ({
      instructionType: PerpetualsInstruction.CreateTokenLedger
    } & ParsedCreateTokenLedgerInstruction<TProgram>)
  | ({
      instructionType: PerpetualsInstruction.ReallocCustody
    } & ParsedReallocCustodyInstruction<TProgram>)
  | ({
      instructionType: PerpetualsInstruction.ReallocPool
    } & ParsedReallocPoolInstruction<TProgram>)
  | ({
      instructionType: PerpetualsInstruction.OperatorSetCustodyConfig
    } & ParsedOperatorSetCustodyConfigInstruction<TProgram>)
  | ({
      instructionType: PerpetualsInstruction.OperatorSetPoolConfig
    } & ParsedOperatorSetPoolConfigInstruction<TProgram>)
  | ({
      instructionType: PerpetualsInstruction.TestInit
    } & ParsedTestInitInstruction<TProgram>)
  | ({
      instructionType: PerpetualsInstruction.SetTestTime
    } & ParsedSetTestTimeInstruction<TProgram>)
  | ({
      instructionType: PerpetualsInstruction.SetTokenLedger
    } & ParsedSetTokenLedgerInstruction<TProgram>)
  | ({
      instructionType: PerpetualsInstruction.Swap2
    } & ParsedSwap2Instruction<TProgram>)
  | ({
      instructionType: PerpetualsInstruction.AddLiquidity2
    } & ParsedAddLiquidity2Instruction<TProgram>)
  | ({
      instructionType: PerpetualsInstruction.RemoveLiquidity2
    } & ParsedRemoveLiquidity2Instruction<TProgram>)
  | ({
      instructionType: PerpetualsInstruction.CreateIncreasePositionMarketRequest
    } & ParsedCreateIncreasePositionMarketRequestInstruction<TProgram>)
  | ({
      instructionType: PerpetualsInstruction.CreateDecreasePositionRequest2
    } & ParsedCreateDecreasePositionRequest2Instruction<TProgram>)
  | ({
      instructionType: PerpetualsInstruction.CreateDecreasePositionMarketRequest
    } & ParsedCreateDecreasePositionMarketRequestInstruction<TProgram>)
  | ({
      instructionType: PerpetualsInstruction.UpdateDecreasePositionRequest2
    } & ParsedUpdateDecreasePositionRequest2Instruction<TProgram>)
  | ({
      instructionType: PerpetualsInstruction.ClosePositionRequest
    } & ParsedClosePositionRequestInstruction<TProgram>)
  | ({
      instructionType: PerpetualsInstruction.IncreasePosition4
    } & ParsedIncreasePosition4Instruction<TProgram>)
  | ({
      instructionType: PerpetualsInstruction.IncreasePositionPreSwap
    } & ParsedIncreasePositionPreSwapInstruction<TProgram>)
  | ({
      instructionType: PerpetualsInstruction.IncreasePositionWithInternalSwap
    } & ParsedIncreasePositionWithInternalSwapInstruction<TProgram>)
  | ({
      instructionType: PerpetualsInstruction.DecreasePosition4
    } & ParsedDecreasePosition4Instruction<TProgram>)
  | ({
      instructionType: PerpetualsInstruction.DecreasePositionWithInternalSwap
    } & ParsedDecreasePositionWithInternalSwapInstruction<TProgram>)
  | ({
      instructionType: PerpetualsInstruction.LiquidateFullPosition4
    } & ParsedLiquidateFullPosition4Instruction<TProgram>)
  | ({
      instructionType: PerpetualsInstruction.RefreshAssetsUnderManagement
    } & ParsedRefreshAssetsUnderManagementInstruction<TProgram>)
  | ({
      instructionType: PerpetualsInstruction.InstantCreateTpsl
    } & ParsedInstantCreateTpslInstruction<TProgram>)
  | ({
      instructionType: PerpetualsInstruction.InstantCreateLimitOrder
    } & ParsedInstantCreateLimitOrderInstruction<TProgram>)
  | ({
      instructionType: PerpetualsInstruction.InstantIncreasePosition
    } & ParsedInstantIncreasePositionInstruction<TProgram>)
  | ({
      instructionType: PerpetualsInstruction.InstantDecreasePosition
    } & ParsedInstantDecreasePositionInstruction<TProgram>)
  | ({
      instructionType: PerpetualsInstruction.InstantUpdateLimitOrder
    } & ParsedInstantUpdateLimitOrderInstruction<TProgram>)
  | ({
      instructionType: PerpetualsInstruction.InstantUpdateTpsl
    } & ParsedInstantUpdateTpslInstruction<TProgram>)
  | ({
      instructionType: PerpetualsInstruction.GetAddLiquidityAmountAndFee2
    } & ParsedGetAddLiquidityAmountAndFee2Instruction<TProgram>)
  | ({
      instructionType: PerpetualsInstruction.GetRemoveLiquidityAmountAndFee2
    } & ParsedGetRemoveLiquidityAmountAndFee2Instruction<TProgram>)
  | ({
      instructionType: PerpetualsInstruction.GetAssetsUnderManagement2
    } & ParsedGetAssetsUnderManagement2Instruction<TProgram>)
