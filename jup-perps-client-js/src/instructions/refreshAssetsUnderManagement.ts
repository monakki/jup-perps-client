/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  transformEncoder,
  type AccountMeta,
  type AccountSignerMeta,
  type Address,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
  type Instruction,
  type InstructionWithAccounts,
  type InstructionWithData,
  type ReadonlyAccount,
  type ReadonlySignerAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
} from '@solana/kit'
import { PERPETUALS_PROGRAM_ADDRESS } from '../programs'
import { getAccountMetaFactory, type ResolvedAccount } from '../shared'

export const REFRESH_ASSETS_UNDER_MANAGEMENT_DISCRIMINATOR = new Uint8Array([
  162, 0, 215, 55, 225, 15, 185, 0,
])

export function getRefreshAssetsUnderManagementDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    REFRESH_ASSETS_UNDER_MANAGEMENT_DISCRIMINATOR
  )
}

export type RefreshAssetsUnderManagementInstruction<
  TProgram extends string = typeof PERPETUALS_PROGRAM_ADDRESS,
  TAccountKeeper extends string | AccountMeta<string> = string,
  TAccountPerpetuals extends string | AccountMeta<string> = string,
  TAccountPool extends string | AccountMeta<string> = string,
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountKeeper extends string
        ? ReadonlySignerAccount<TAccountKeeper> &
            AccountSignerMeta<TAccountKeeper>
        : TAccountKeeper,
      TAccountPerpetuals extends string
        ? ReadonlyAccount<TAccountPerpetuals>
        : TAccountPerpetuals,
      TAccountPool extends string
        ? WritableAccount<TAccountPool>
        : TAccountPool,
      ...TRemainingAccounts,
    ]
  >

export type RefreshAssetsUnderManagementInstructionData = {
  discriminator: ReadonlyUint8Array
}

export type RefreshAssetsUnderManagementInstructionDataArgs = {}

export function getRefreshAssetsUnderManagementInstructionDataEncoder(): FixedSizeEncoder<RefreshAssetsUnderManagementInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([['discriminator', fixEncoderSize(getBytesEncoder(), 8)]]),
    (value) => ({
      ...value,
      discriminator: REFRESH_ASSETS_UNDER_MANAGEMENT_DISCRIMINATOR,
    })
  )
}

export function getRefreshAssetsUnderManagementInstructionDataDecoder(): FixedSizeDecoder<RefreshAssetsUnderManagementInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
  ])
}

export function getRefreshAssetsUnderManagementInstructionDataCodec(): FixedSizeCodec<
  RefreshAssetsUnderManagementInstructionDataArgs,
  RefreshAssetsUnderManagementInstructionData
> {
  return combineCodec(
    getRefreshAssetsUnderManagementInstructionDataEncoder(),
    getRefreshAssetsUnderManagementInstructionDataDecoder()
  )
}

export type RefreshAssetsUnderManagementInput<
  TAccountKeeper extends string = string,
  TAccountPerpetuals extends string = string,
  TAccountPool extends string = string,
> = {
  keeper: TransactionSigner<TAccountKeeper>
  perpetuals: Address<TAccountPerpetuals>
  pool: Address<TAccountPool>
}

export function getRefreshAssetsUnderManagementInstruction<
  TAccountKeeper extends string,
  TAccountPerpetuals extends string,
  TAccountPool extends string,
  TProgramAddress extends Address = typeof PERPETUALS_PROGRAM_ADDRESS,
>(
  input: RefreshAssetsUnderManagementInput<
    TAccountKeeper,
    TAccountPerpetuals,
    TAccountPool
  >,
  config?: { programAddress?: TProgramAddress }
): RefreshAssetsUnderManagementInstruction<
  TProgramAddress,
  TAccountKeeper,
  TAccountPerpetuals,
  TAccountPool
> {
  // Program address.
  const programAddress = config?.programAddress ?? PERPETUALS_PROGRAM_ADDRESS

  // Original accounts.
  const originalAccounts = {
    keeper: { value: input.keeper ?? null, isWritable: false },
    perpetuals: { value: input.perpetuals ?? null, isWritable: false },
    pool: { value: input.pool ?? null, isWritable: true },
  }
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId')
  const instruction = {
    accounts: [
      getAccountMeta(accounts.keeper),
      getAccountMeta(accounts.perpetuals),
      getAccountMeta(accounts.pool),
    ],
    programAddress,
    data: getRefreshAssetsUnderManagementInstructionDataEncoder().encode({}),
  } as RefreshAssetsUnderManagementInstruction<
    TProgramAddress,
    TAccountKeeper,
    TAccountPerpetuals,
    TAccountPool
  >

  return instruction
}

export type ParsedRefreshAssetsUnderManagementInstruction<
  TProgram extends string = typeof PERPETUALS_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> = {
  programAddress: Address<TProgram>
  accounts: {
    keeper: TAccountMetas[0]
    perpetuals: TAccountMetas[1]
    pool: TAccountMetas[2]
  }
  data: RefreshAssetsUnderManagementInstructionData
}

export function parseRefreshAssetsUnderManagementInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>
): ParsedRefreshAssetsUnderManagementInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 3) {
    // TODO: Coded error.
    throw new Error('Not enough accounts')
  }
  let accountIndex = 0
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!
    accountIndex += 1
    return accountMeta
  }
  return {
    programAddress: instruction.programAddress,
    accounts: {
      keeper: getNextAccount(),
      perpetuals: getNextAccount(),
      pool: getNextAccount(),
    },
    data: getRefreshAssetsUnderManagementInstructionDataDecoder().decode(
      instruction.data
    ),
  }
}
