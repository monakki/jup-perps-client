/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getOptionDecoder,
  getOptionEncoder,
  getStructDecoder,
  getStructEncoder,
  getU64Decoder,
  getU64Encoder,
  transformEncoder,
  type AccountMeta,
  type AccountSignerMeta,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type Instruction,
  type InstructionWithAccounts,
  type InstructionWithData,
  type Option,
  type OptionOrNullable,
  type ReadonlyAccount,
  type ReadonlySignerAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
} from '@solana/kit'
import { PERPETUALS_PROGRAM_ADDRESS } from '../programs'
import { getAccountMetaFactory, type ResolvedAccount } from '../shared'

export const ADD_LIQUIDITY2_DISCRIMINATOR = new Uint8Array([
  228, 162, 78, 28, 70, 219, 116, 115,
])

export function getAddLiquidity2DiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    ADD_LIQUIDITY2_DISCRIMINATOR
  )
}

export type AddLiquidity2Instruction<
  TProgram extends string = typeof PERPETUALS_PROGRAM_ADDRESS,
  TAccountOwner extends string | AccountMeta<string> = string,
  TAccountFundingAccount extends string | AccountMeta<string> = string,
  TAccountLpTokenAccount extends string | AccountMeta<string> = string,
  TAccountTransferAuthority extends string | AccountMeta<string> = string,
  TAccountPerpetuals extends string | AccountMeta<string> = string,
  TAccountPool extends string | AccountMeta<string> = string,
  TAccountCustody extends string | AccountMeta<string> = string,
  TAccountCustodyDovesPriceAccount extends
    | string
    | AccountMeta<string> = string,
  TAccountCustodyPythnetPriceAccount extends
    | string
    | AccountMeta<string> = string,
  TAccountCustodyTokenAccount extends string | AccountMeta<string> = string,
  TAccountLpTokenMint extends string | AccountMeta<string> = string,
  TAccountTokenProgram extends
    | string
    | AccountMeta<string> = 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA',
  TAccountEventAuthority extends string | AccountMeta<string> = string,
  TAccountProgram extends string | AccountMeta<string> = string,
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountOwner extends string
        ? ReadonlySignerAccount<TAccountOwner> &
            AccountSignerMeta<TAccountOwner>
        : TAccountOwner,
      TAccountFundingAccount extends string
        ? WritableAccount<TAccountFundingAccount>
        : TAccountFundingAccount,
      TAccountLpTokenAccount extends string
        ? WritableAccount<TAccountLpTokenAccount>
        : TAccountLpTokenAccount,
      TAccountTransferAuthority extends string
        ? ReadonlyAccount<TAccountTransferAuthority>
        : TAccountTransferAuthority,
      TAccountPerpetuals extends string
        ? ReadonlyAccount<TAccountPerpetuals>
        : TAccountPerpetuals,
      TAccountPool extends string
        ? WritableAccount<TAccountPool>
        : TAccountPool,
      TAccountCustody extends string
        ? WritableAccount<TAccountCustody>
        : TAccountCustody,
      TAccountCustodyDovesPriceAccount extends string
        ? ReadonlyAccount<TAccountCustodyDovesPriceAccount>
        : TAccountCustodyDovesPriceAccount,
      TAccountCustodyPythnetPriceAccount extends string
        ? ReadonlyAccount<TAccountCustodyPythnetPriceAccount>
        : TAccountCustodyPythnetPriceAccount,
      TAccountCustodyTokenAccount extends string
        ? WritableAccount<TAccountCustodyTokenAccount>
        : TAccountCustodyTokenAccount,
      TAccountLpTokenMint extends string
        ? WritableAccount<TAccountLpTokenMint>
        : TAccountLpTokenMint,
      TAccountTokenProgram extends string
        ? ReadonlyAccount<TAccountTokenProgram>
        : TAccountTokenProgram,
      TAccountEventAuthority extends string
        ? ReadonlyAccount<TAccountEventAuthority>
        : TAccountEventAuthority,
      TAccountProgram extends string
        ? ReadonlyAccount<TAccountProgram>
        : TAccountProgram,
      ...TRemainingAccounts,
    ]
  >

export type AddLiquidity2InstructionData = {
  discriminator: ReadonlyUint8Array
  tokenAmountIn: bigint
  minLpAmountOut: bigint
  tokenAmountPreSwap: Option<bigint>
}

export type AddLiquidity2InstructionDataArgs = {
  tokenAmountIn: number | bigint
  minLpAmountOut: number | bigint
  tokenAmountPreSwap: OptionOrNullable<number | bigint>
}

export function getAddLiquidity2InstructionDataEncoder(): Encoder<AddLiquidity2InstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['tokenAmountIn', getU64Encoder()],
      ['minLpAmountOut', getU64Encoder()],
      ['tokenAmountPreSwap', getOptionEncoder(getU64Encoder())],
    ]),
    (value) => ({ ...value, discriminator: ADD_LIQUIDITY2_DISCRIMINATOR })
  )
}

export function getAddLiquidity2InstructionDataDecoder(): Decoder<AddLiquidity2InstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['tokenAmountIn', getU64Decoder()],
    ['minLpAmountOut', getU64Decoder()],
    ['tokenAmountPreSwap', getOptionDecoder(getU64Decoder())],
  ])
}

export function getAddLiquidity2InstructionDataCodec(): Codec<
  AddLiquidity2InstructionDataArgs,
  AddLiquidity2InstructionData
> {
  return combineCodec(
    getAddLiquidity2InstructionDataEncoder(),
    getAddLiquidity2InstructionDataDecoder()
  )
}

export type AddLiquidity2Input<
  TAccountOwner extends string = string,
  TAccountFundingAccount extends string = string,
  TAccountLpTokenAccount extends string = string,
  TAccountTransferAuthority extends string = string,
  TAccountPerpetuals extends string = string,
  TAccountPool extends string = string,
  TAccountCustody extends string = string,
  TAccountCustodyDovesPriceAccount extends string = string,
  TAccountCustodyPythnetPriceAccount extends string = string,
  TAccountCustodyTokenAccount extends string = string,
  TAccountLpTokenMint extends string = string,
  TAccountTokenProgram extends string = string,
  TAccountEventAuthority extends string = string,
  TAccountProgram extends string = string,
> = {
  owner: TransactionSigner<TAccountOwner>
  fundingAccount: Address<TAccountFundingAccount>
  lpTokenAccount: Address<TAccountLpTokenAccount>
  transferAuthority: Address<TAccountTransferAuthority>
  perpetuals: Address<TAccountPerpetuals>
  pool: Address<TAccountPool>
  custody: Address<TAccountCustody>
  custodyDovesPriceAccount: Address<TAccountCustodyDovesPriceAccount>
  custodyPythnetPriceAccount: Address<TAccountCustodyPythnetPriceAccount>
  custodyTokenAccount: Address<TAccountCustodyTokenAccount>
  lpTokenMint: Address<TAccountLpTokenMint>
  tokenProgram?: Address<TAccountTokenProgram>
  eventAuthority: Address<TAccountEventAuthority>
  program: Address<TAccountProgram>
  tokenAmountIn: AddLiquidity2InstructionDataArgs['tokenAmountIn']
  minLpAmountOut: AddLiquidity2InstructionDataArgs['minLpAmountOut']
  tokenAmountPreSwap: AddLiquidity2InstructionDataArgs['tokenAmountPreSwap']
}

export function getAddLiquidity2Instruction<
  TAccountOwner extends string,
  TAccountFundingAccount extends string,
  TAccountLpTokenAccount extends string,
  TAccountTransferAuthority extends string,
  TAccountPerpetuals extends string,
  TAccountPool extends string,
  TAccountCustody extends string,
  TAccountCustodyDovesPriceAccount extends string,
  TAccountCustodyPythnetPriceAccount extends string,
  TAccountCustodyTokenAccount extends string,
  TAccountLpTokenMint extends string,
  TAccountTokenProgram extends string,
  TAccountEventAuthority extends string,
  TAccountProgram extends string,
  TProgramAddress extends Address = typeof PERPETUALS_PROGRAM_ADDRESS,
>(
  input: AddLiquidity2Input<
    TAccountOwner,
    TAccountFundingAccount,
    TAccountLpTokenAccount,
    TAccountTransferAuthority,
    TAccountPerpetuals,
    TAccountPool,
    TAccountCustody,
    TAccountCustodyDovesPriceAccount,
    TAccountCustodyPythnetPriceAccount,
    TAccountCustodyTokenAccount,
    TAccountLpTokenMint,
    TAccountTokenProgram,
    TAccountEventAuthority,
    TAccountProgram
  >,
  config?: { programAddress?: TProgramAddress }
): AddLiquidity2Instruction<
  TProgramAddress,
  TAccountOwner,
  TAccountFundingAccount,
  TAccountLpTokenAccount,
  TAccountTransferAuthority,
  TAccountPerpetuals,
  TAccountPool,
  TAccountCustody,
  TAccountCustodyDovesPriceAccount,
  TAccountCustodyPythnetPriceAccount,
  TAccountCustodyTokenAccount,
  TAccountLpTokenMint,
  TAccountTokenProgram,
  TAccountEventAuthority,
  TAccountProgram
> {
  // Program address.
  const programAddress = config?.programAddress ?? PERPETUALS_PROGRAM_ADDRESS

  // Original accounts.
  const originalAccounts = {
    owner: { value: input.owner ?? null, isWritable: false },
    fundingAccount: { value: input.fundingAccount ?? null, isWritable: true },
    lpTokenAccount: { value: input.lpTokenAccount ?? null, isWritable: true },
    transferAuthority: {
      value: input.transferAuthority ?? null,
      isWritable: false,
    },
    perpetuals: { value: input.perpetuals ?? null, isWritable: false },
    pool: { value: input.pool ?? null, isWritable: true },
    custody: { value: input.custody ?? null, isWritable: true },
    custodyDovesPriceAccount: {
      value: input.custodyDovesPriceAccount ?? null,
      isWritable: false,
    },
    custodyPythnetPriceAccount: {
      value: input.custodyPythnetPriceAccount ?? null,
      isWritable: false,
    },
    custodyTokenAccount: {
      value: input.custodyTokenAccount ?? null,
      isWritable: true,
    },
    lpTokenMint: { value: input.lpTokenMint ?? null, isWritable: true },
    tokenProgram: { value: input.tokenProgram ?? null, isWritable: false },
    eventAuthority: { value: input.eventAuthority ?? null, isWritable: false },
    program: { value: input.program ?? null, isWritable: false },
  }
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >

  // Original args.
  const args = { ...input }

  // Resolve default values.
  if (!accounts.tokenProgram.value) {
    accounts.tokenProgram.value =
      'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA' as Address<'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'>
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId')
  const instruction = {
    accounts: [
      getAccountMeta(accounts.owner),
      getAccountMeta(accounts.fundingAccount),
      getAccountMeta(accounts.lpTokenAccount),
      getAccountMeta(accounts.transferAuthority),
      getAccountMeta(accounts.perpetuals),
      getAccountMeta(accounts.pool),
      getAccountMeta(accounts.custody),
      getAccountMeta(accounts.custodyDovesPriceAccount),
      getAccountMeta(accounts.custodyPythnetPriceAccount),
      getAccountMeta(accounts.custodyTokenAccount),
      getAccountMeta(accounts.lpTokenMint),
      getAccountMeta(accounts.tokenProgram),
      getAccountMeta(accounts.eventAuthority),
      getAccountMeta(accounts.program),
    ],
    programAddress,
    data: getAddLiquidity2InstructionDataEncoder().encode(
      args as AddLiquidity2InstructionDataArgs
    ),
  } as AddLiquidity2Instruction<
    TProgramAddress,
    TAccountOwner,
    TAccountFundingAccount,
    TAccountLpTokenAccount,
    TAccountTransferAuthority,
    TAccountPerpetuals,
    TAccountPool,
    TAccountCustody,
    TAccountCustodyDovesPriceAccount,
    TAccountCustodyPythnetPriceAccount,
    TAccountCustodyTokenAccount,
    TAccountLpTokenMint,
    TAccountTokenProgram,
    TAccountEventAuthority,
    TAccountProgram
  >

  return instruction
}

export type ParsedAddLiquidity2Instruction<
  TProgram extends string = typeof PERPETUALS_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> = {
  programAddress: Address<TProgram>
  accounts: {
    owner: TAccountMetas[0]
    fundingAccount: TAccountMetas[1]
    lpTokenAccount: TAccountMetas[2]
    transferAuthority: TAccountMetas[3]
    perpetuals: TAccountMetas[4]
    pool: TAccountMetas[5]
    custody: TAccountMetas[6]
    custodyDovesPriceAccount: TAccountMetas[7]
    custodyPythnetPriceAccount: TAccountMetas[8]
    custodyTokenAccount: TAccountMetas[9]
    lpTokenMint: TAccountMetas[10]
    tokenProgram: TAccountMetas[11]
    eventAuthority: TAccountMetas[12]
    program: TAccountMetas[13]
  }
  data: AddLiquidity2InstructionData
}

export function parseAddLiquidity2Instruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>
): ParsedAddLiquidity2Instruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 14) {
    // TODO: Coded error.
    throw new Error('Not enough accounts')
  }
  let accountIndex = 0
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!
    accountIndex += 1
    return accountMeta
  }
  return {
    programAddress: instruction.programAddress,
    accounts: {
      owner: getNextAccount(),
      fundingAccount: getNextAccount(),
      lpTokenAccount: getNextAccount(),
      transferAuthority: getNextAccount(),
      perpetuals: getNextAccount(),
      pool: getNextAccount(),
      custody: getNextAccount(),
      custodyDovesPriceAccount: getNextAccount(),
      custodyPythnetPriceAccount: getNextAccount(),
      custodyTokenAccount: getNextAccount(),
      lpTokenMint: getNextAccount(),
      tokenProgram: getNextAccount(),
      eventAuthority: getNextAccount(),
      program: getNextAccount(),
    },
    data: getAddLiquidity2InstructionDataDecoder().decode(instruction.data),
  }
}
