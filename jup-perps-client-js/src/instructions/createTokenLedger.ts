/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  transformEncoder,
  type AccountMeta,
  type AccountSignerMeta,
  type Address,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
  type Instruction,
  type InstructionWithAccounts,
  type InstructionWithData,
  type ReadonlyAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableSignerAccount,
} from '@solana/kit'
import { PERPETUALS_PROGRAM_ADDRESS } from '../programs'
import { getAccountMetaFactory, type ResolvedAccount } from '../shared'

export const CREATE_TOKEN_LEDGER_DISCRIMINATOR = new Uint8Array([
  232, 242, 197, 253, 240, 143, 129, 52,
])

export function getCreateTokenLedgerDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    CREATE_TOKEN_LEDGER_DISCRIMINATOR
  )
}

export type CreateTokenLedgerInstruction<
  TProgram extends string = typeof PERPETUALS_PROGRAM_ADDRESS,
  TAccountTokenLedger extends string | AccountMeta<string> = string,
  TAccountPayer extends string | AccountMeta<string> = string,
  TAccountSystemProgram extends
    | string
    | AccountMeta<string> = '11111111111111111111111111111111',
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountTokenLedger extends string
        ? WritableSignerAccount<TAccountTokenLedger> &
            AccountSignerMeta<TAccountTokenLedger>
        : TAccountTokenLedger,
      TAccountPayer extends string
        ? WritableSignerAccount<TAccountPayer> &
            AccountSignerMeta<TAccountPayer>
        : TAccountPayer,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      ...TRemainingAccounts,
    ]
  >

export type CreateTokenLedgerInstructionData = {
  discriminator: ReadonlyUint8Array
}

export type CreateTokenLedgerInstructionDataArgs = {}

export function getCreateTokenLedgerInstructionDataEncoder(): FixedSizeEncoder<CreateTokenLedgerInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([['discriminator', fixEncoderSize(getBytesEncoder(), 8)]]),
    (value) => ({ ...value, discriminator: CREATE_TOKEN_LEDGER_DISCRIMINATOR })
  )
}

export function getCreateTokenLedgerInstructionDataDecoder(): FixedSizeDecoder<CreateTokenLedgerInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
  ])
}

export function getCreateTokenLedgerInstructionDataCodec(): FixedSizeCodec<
  CreateTokenLedgerInstructionDataArgs,
  CreateTokenLedgerInstructionData
> {
  return combineCodec(
    getCreateTokenLedgerInstructionDataEncoder(),
    getCreateTokenLedgerInstructionDataDecoder()
  )
}

export type CreateTokenLedgerInput<
  TAccountTokenLedger extends string = string,
  TAccountPayer extends string = string,
  TAccountSystemProgram extends string = string,
> = {
  tokenLedger: TransactionSigner<TAccountTokenLedger>
  payer: TransactionSigner<TAccountPayer>
  systemProgram?: Address<TAccountSystemProgram>
}

export function getCreateTokenLedgerInstruction<
  TAccountTokenLedger extends string,
  TAccountPayer extends string,
  TAccountSystemProgram extends string,
  TProgramAddress extends Address = typeof PERPETUALS_PROGRAM_ADDRESS,
>(
  input: CreateTokenLedgerInput<
    TAccountTokenLedger,
    TAccountPayer,
    TAccountSystemProgram
  >,
  config?: { programAddress?: TProgramAddress }
): CreateTokenLedgerInstruction<
  TProgramAddress,
  TAccountTokenLedger,
  TAccountPayer,
  TAccountSystemProgram
> {
  // Program address.
  const programAddress = config?.programAddress ?? PERPETUALS_PROGRAM_ADDRESS

  // Original accounts.
  const originalAccounts = {
    tokenLedger: { value: input.tokenLedger ?? null, isWritable: true },
    payer: { value: input.payer ?? null, isWritable: true },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  }
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >

  // Resolve default values.
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId')
  const instruction = {
    accounts: [
      getAccountMeta(accounts.tokenLedger),
      getAccountMeta(accounts.payer),
      getAccountMeta(accounts.systemProgram),
    ],
    programAddress,
    data: getCreateTokenLedgerInstructionDataEncoder().encode({}),
  } as CreateTokenLedgerInstruction<
    TProgramAddress,
    TAccountTokenLedger,
    TAccountPayer,
    TAccountSystemProgram
  >

  return instruction
}

export type ParsedCreateTokenLedgerInstruction<
  TProgram extends string = typeof PERPETUALS_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> = {
  programAddress: Address<TProgram>
  accounts: {
    tokenLedger: TAccountMetas[0]
    payer: TAccountMetas[1]
    systemProgram: TAccountMetas[2]
  }
  data: CreateTokenLedgerInstructionData
}

export function parseCreateTokenLedgerInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>
): ParsedCreateTokenLedgerInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 3) {
    // TODO: Coded error.
    throw new Error('Not enough accounts')
  }
  let accountIndex = 0
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!
    accountIndex += 1
    return accountMeta
  }
  return {
    programAddress: instruction.programAddress,
    accounts: {
      tokenLedger: getNextAccount(),
      payer: getNextAccount(),
      systemProgram: getNextAccount(),
    },
    data: getCreateTokenLedgerInstructionDataDecoder().decode(instruction.data),
  }
}
