/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getOptionDecoder,
  getOptionEncoder,
  getStructDecoder,
  getStructEncoder,
  transformEncoder,
  type AccountMeta,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type Instruction,
  type InstructionWithAccounts,
  type InstructionWithData,
  type Option,
  type OptionOrNullable,
  type ReadonlyAccount,
  type ReadonlyUint8Array,
} from '@solana/kit'
import { PERPETUALS_PROGRAM_ADDRESS } from '../programs'
import { getAccountMetaFactory, type ResolvedAccount } from '../shared'
import {
  getPriceCalcModeDecoder,
  getPriceCalcModeEncoder,
  type PriceCalcMode,
  type PriceCalcModeArgs,
} from '../types'

export const GET_ASSETS_UNDER_MANAGEMENT2_DISCRIMINATOR = new Uint8Array([
  193, 210, 13, 249, 113, 149, 29, 84,
])

export function getGetAssetsUnderManagement2DiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    GET_ASSETS_UNDER_MANAGEMENT2_DISCRIMINATOR
  )
}

export type GetAssetsUnderManagement2Instruction<
  TProgram extends string = typeof PERPETUALS_PROGRAM_ADDRESS,
  TAccountPerpetuals extends string | AccountMeta<string> = string,
  TAccountPool extends string | AccountMeta<string> = string,
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountPerpetuals extends string
        ? ReadonlyAccount<TAccountPerpetuals>
        : TAccountPerpetuals,
      TAccountPool extends string
        ? ReadonlyAccount<TAccountPool>
        : TAccountPool,
      ...TRemainingAccounts,
    ]
  >

export type GetAssetsUnderManagement2InstructionData = {
  discriminator: ReadonlyUint8Array
  mode: Option<PriceCalcMode>
}

export type GetAssetsUnderManagement2InstructionDataArgs = {
  mode: OptionOrNullable<PriceCalcModeArgs>
}

export function getGetAssetsUnderManagement2InstructionDataEncoder(): Encoder<GetAssetsUnderManagement2InstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['mode', getOptionEncoder(getPriceCalcModeEncoder())],
    ]),
    (value) => ({
      ...value,
      discriminator: GET_ASSETS_UNDER_MANAGEMENT2_DISCRIMINATOR,
    })
  )
}

export function getGetAssetsUnderManagement2InstructionDataDecoder(): Decoder<GetAssetsUnderManagement2InstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['mode', getOptionDecoder(getPriceCalcModeDecoder())],
  ])
}

export function getGetAssetsUnderManagement2InstructionDataCodec(): Codec<
  GetAssetsUnderManagement2InstructionDataArgs,
  GetAssetsUnderManagement2InstructionData
> {
  return combineCodec(
    getGetAssetsUnderManagement2InstructionDataEncoder(),
    getGetAssetsUnderManagement2InstructionDataDecoder()
  )
}

export type GetAssetsUnderManagement2Input<
  TAccountPerpetuals extends string = string,
  TAccountPool extends string = string,
> = {
  perpetuals: Address<TAccountPerpetuals>
  pool: Address<TAccountPool>
  mode: GetAssetsUnderManagement2InstructionDataArgs['mode']
}

export function getGetAssetsUnderManagement2Instruction<
  TAccountPerpetuals extends string,
  TAccountPool extends string,
  TProgramAddress extends Address = typeof PERPETUALS_PROGRAM_ADDRESS,
>(
  input: GetAssetsUnderManagement2Input<TAccountPerpetuals, TAccountPool>,
  config?: { programAddress?: TProgramAddress }
): GetAssetsUnderManagement2Instruction<
  TProgramAddress,
  TAccountPerpetuals,
  TAccountPool
> {
  // Program address.
  const programAddress = config?.programAddress ?? PERPETUALS_PROGRAM_ADDRESS

  // Original accounts.
  const originalAccounts = {
    perpetuals: { value: input.perpetuals ?? null, isWritable: false },
    pool: { value: input.pool ?? null, isWritable: false },
  }
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >

  // Original args.
  const args = { ...input }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId')
  const instruction = {
    accounts: [
      getAccountMeta(accounts.perpetuals),
      getAccountMeta(accounts.pool),
    ],
    programAddress,
    data: getGetAssetsUnderManagement2InstructionDataEncoder().encode(
      args as GetAssetsUnderManagement2InstructionDataArgs
    ),
  } as GetAssetsUnderManagement2Instruction<
    TProgramAddress,
    TAccountPerpetuals,
    TAccountPool
  >

  return instruction
}

export type ParsedGetAssetsUnderManagement2Instruction<
  TProgram extends string = typeof PERPETUALS_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> = {
  programAddress: Address<TProgram>
  accounts: {
    perpetuals: TAccountMetas[0]
    pool: TAccountMetas[1]
  }
  data: GetAssetsUnderManagement2InstructionData
}

export function parseGetAssetsUnderManagement2Instruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>
): ParsedGetAssetsUnderManagement2Instruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 2) {
    // TODO: Coded error.
    throw new Error('Not enough accounts')
  }
  let accountIndex = 0
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!
    accountIndex += 1
    return accountMeta
  }
  return {
    programAddress: instruction.programAddress,
    accounts: {
      perpetuals: getNextAccount(),
      pool: getNextAccount(),
    },
    data: getGetAssetsUnderManagement2InstructionDataDecoder().decode(
      instruction.data
    ),
  }
}
