/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  assertAccountExists,
  assertAccountsExist,
  combineCodec,
  decodeAccount,
  fetchEncodedAccount,
  fetchEncodedAccounts,
  fixDecoderSize,
  fixEncoderSize,
  getAddressDecoder,
  getAddressEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  getU64Decoder,
  getU64Encoder,
  transformEncoder,
  type Account,
  type Address,
  type EncodedAccount,
  type FetchAccountConfig,
  type FetchAccountsConfig,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
  type MaybeAccount,
  type MaybeEncodedAccount,
  type ReadonlyUint8Array,
} from '@solana/kit'

export const TOKEN_LEDGER_DISCRIMINATOR = new Uint8Array([
  156, 247, 9, 188, 54, 108, 85, 77,
])

export function getTokenLedgerDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(TOKEN_LEDGER_DISCRIMINATOR)
}

export type TokenLedger = {
  discriminator: ReadonlyUint8Array
  tokenAccount: Address
  amount: bigint
}

export type TokenLedgerArgs = { tokenAccount: Address; amount: number | bigint }

export function getTokenLedgerEncoder(): FixedSizeEncoder<TokenLedgerArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['tokenAccount', getAddressEncoder()],
      ['amount', getU64Encoder()],
    ]),
    (value) => ({ ...value, discriminator: TOKEN_LEDGER_DISCRIMINATOR })
  )
}

export function getTokenLedgerDecoder(): FixedSizeDecoder<TokenLedger> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['tokenAccount', getAddressDecoder()],
    ['amount', getU64Decoder()],
  ])
}

export function getTokenLedgerCodec(): FixedSizeCodec<
  TokenLedgerArgs,
  TokenLedger
> {
  return combineCodec(getTokenLedgerEncoder(), getTokenLedgerDecoder())
}

export function decodeTokenLedger<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress>
): Account<TokenLedger, TAddress>
export function decodeTokenLedger<TAddress extends string = string>(
  encodedAccount: MaybeEncodedAccount<TAddress>
): MaybeAccount<TokenLedger, TAddress>
export function decodeTokenLedger<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress> | MaybeEncodedAccount<TAddress>
): Account<TokenLedger, TAddress> | MaybeAccount<TokenLedger, TAddress> {
  return decodeAccount(
    encodedAccount as MaybeEncodedAccount<TAddress>,
    getTokenLedgerDecoder()
  )
}

export async function fetchTokenLedger<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<Account<TokenLedger, TAddress>> {
  const maybeAccount = await fetchMaybeTokenLedger(rpc, address, config)
  assertAccountExists(maybeAccount)
  return maybeAccount
}

export async function fetchMaybeTokenLedger<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<MaybeAccount<TokenLedger, TAddress>> {
  const maybeAccount = await fetchEncodedAccount(rpc, address, config)
  return decodeTokenLedger(maybeAccount)
}

export async function fetchAllTokenLedger(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<Account<TokenLedger>[]> {
  const maybeAccounts = await fetchAllMaybeTokenLedger(rpc, addresses, config)
  assertAccountsExist(maybeAccounts)
  return maybeAccounts
}

export async function fetchAllMaybeTokenLedger(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<MaybeAccount<TokenLedger>[]> {
  const maybeAccounts = await fetchEncodedAccounts(rpc, addresses, config)
  return maybeAccounts.map((maybeAccount) => decodeTokenLedger(maybeAccount))
}

export function getTokenLedgerSize(): number {
  return 48
}
