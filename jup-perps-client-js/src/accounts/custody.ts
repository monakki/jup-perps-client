/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  assertAccountExists,
  assertAccountsExist,
  combineCodec,
  decodeAccount,
  fetchEncodedAccount,
  fetchEncodedAccounts,
  fixDecoderSize,
  fixEncoderSize,
  getAddressDecoder,
  getAddressEncoder,
  getBooleanDecoder,
  getBooleanEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  getU64Decoder,
  getU64Encoder,
  getU8Decoder,
  getU8Encoder,
  transformEncoder,
  type Account,
  type Address,
  type EncodedAccount,
  type FetchAccountConfig,
  type FetchAccountsConfig,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
  type MaybeAccount,
  type MaybeEncodedAccount,
  type ReadonlyUint8Array,
} from '@solana/kit'
import {
  getAssetsDecoder,
  getAssetsEncoder,
  getFundingRateStateDecoder,
  getFundingRateStateEncoder,
  getJumpRateStateDecoder,
  getJumpRateStateEncoder,
  getOracleParamsDecoder,
  getOracleParamsEncoder,
  getPermissionsDecoder,
  getPermissionsEncoder,
  getPriceImpactBufferDecoder,
  getPriceImpactBufferEncoder,
  getPricingParamsDecoder,
  getPricingParamsEncoder,
  type Assets,
  type AssetsArgs,
  type FundingRateState,
  type FundingRateStateArgs,
  type JumpRateState,
  type JumpRateStateArgs,
  type OracleParams,
  type OracleParamsArgs,
  type Permissions,
  type PermissionsArgs,
  type PriceImpactBuffer,
  type PriceImpactBufferArgs,
  type PricingParams,
  type PricingParamsArgs,
} from '../types'

export const CUSTODY_DISCRIMINATOR = new Uint8Array([
  1, 184, 48, 81, 93, 131, 63, 145,
])

export function getCustodyDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(CUSTODY_DISCRIMINATOR)
}

export type Custody = {
  discriminator: ReadonlyUint8Array
  pool: Address
  mint: Address
  tokenAccount: Address
  decimals: number
  isStable: boolean
  oracle: OracleParams
  pricing: PricingParams
  permissions: Permissions
  targetRatioBps: bigint
  assets: Assets
  fundingRateState: FundingRateState
  bump: number
  tokenAccountBump: number
  increasePositionBps: bigint
  decreasePositionBps: bigint
  maxPositionSizeUsd: bigint
  dovesOracle: Address
  jumpRateState: JumpRateState
  dovesAgOracle: Address
  priceImpactBuffer: PriceImpactBuffer
}

export type CustodyArgs = {
  pool: Address
  mint: Address
  tokenAccount: Address
  decimals: number
  isStable: boolean
  oracle: OracleParamsArgs
  pricing: PricingParamsArgs
  permissions: PermissionsArgs
  targetRatioBps: number | bigint
  assets: AssetsArgs
  fundingRateState: FundingRateStateArgs
  bump: number
  tokenAccountBump: number
  increasePositionBps: number | bigint
  decreasePositionBps: number | bigint
  maxPositionSizeUsd: number | bigint
  dovesOracle: Address
  jumpRateState: JumpRateStateArgs
  dovesAgOracle: Address
  priceImpactBuffer: PriceImpactBufferArgs
}

export function getCustodyEncoder(): FixedSizeEncoder<CustodyArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['pool', getAddressEncoder()],
      ['mint', getAddressEncoder()],
      ['tokenAccount', getAddressEncoder()],
      ['decimals', getU8Encoder()],
      ['isStable', getBooleanEncoder()],
      ['oracle', getOracleParamsEncoder()],
      ['pricing', getPricingParamsEncoder()],
      ['permissions', getPermissionsEncoder()],
      ['targetRatioBps', getU64Encoder()],
      ['assets', getAssetsEncoder()],
      ['fundingRateState', getFundingRateStateEncoder()],
      ['bump', getU8Encoder()],
      ['tokenAccountBump', getU8Encoder()],
      ['increasePositionBps', getU64Encoder()],
      ['decreasePositionBps', getU64Encoder()],
      ['maxPositionSizeUsd', getU64Encoder()],
      ['dovesOracle', getAddressEncoder()],
      ['jumpRateState', getJumpRateStateEncoder()],
      ['dovesAgOracle', getAddressEncoder()],
      ['priceImpactBuffer', getPriceImpactBufferEncoder()],
    ]),
    (value) => ({ ...value, discriminator: CUSTODY_DISCRIMINATOR })
  )
}

export function getCustodyDecoder(): FixedSizeDecoder<Custody> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['pool', getAddressDecoder()],
    ['mint', getAddressDecoder()],
    ['tokenAccount', getAddressDecoder()],
    ['decimals', getU8Decoder()],
    ['isStable', getBooleanDecoder()],
    ['oracle', getOracleParamsDecoder()],
    ['pricing', getPricingParamsDecoder()],
    ['permissions', getPermissionsDecoder()],
    ['targetRatioBps', getU64Decoder()],
    ['assets', getAssetsDecoder()],
    ['fundingRateState', getFundingRateStateDecoder()],
    ['bump', getU8Decoder()],
    ['tokenAccountBump', getU8Decoder()],
    ['increasePositionBps', getU64Decoder()],
    ['decreasePositionBps', getU64Decoder()],
    ['maxPositionSizeUsd', getU64Decoder()],
    ['dovesOracle', getAddressDecoder()],
    ['jumpRateState', getJumpRateStateDecoder()],
    ['dovesAgOracle', getAddressDecoder()],
    ['priceImpactBuffer', getPriceImpactBufferDecoder()],
  ])
}

export function getCustodyCodec(): FixedSizeCodec<CustodyArgs, Custody> {
  return combineCodec(getCustodyEncoder(), getCustodyDecoder())
}

export function decodeCustody<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress>
): Account<Custody, TAddress>
export function decodeCustody<TAddress extends string = string>(
  encodedAccount: MaybeEncodedAccount<TAddress>
): MaybeAccount<Custody, TAddress>
export function decodeCustody<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress> | MaybeEncodedAccount<TAddress>
): Account<Custody, TAddress> | MaybeAccount<Custody, TAddress> {
  return decodeAccount(
    encodedAccount as MaybeEncodedAccount<TAddress>,
    getCustodyDecoder()
  )
}

export async function fetchCustody<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<Account<Custody, TAddress>> {
  const maybeAccount = await fetchMaybeCustody(rpc, address, config)
  assertAccountExists(maybeAccount)
  return maybeAccount
}

export async function fetchMaybeCustody<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<MaybeAccount<Custody, TAddress>> {
  const maybeAccount = await fetchEncodedAccount(rpc, address, config)
  return decodeCustody(maybeAccount)
}

export async function fetchAllCustody(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<Account<Custody>[]> {
  const maybeAccounts = await fetchAllMaybeCustody(rpc, addresses, config)
  assertAccountsExist(maybeAccounts)
  return maybeAccounts
}

export async function fetchAllMaybeCustody(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<MaybeAccount<Custody>[]> {
  const maybeAccounts = await fetchEncodedAccounts(rpc, addresses, config)
  return maybeAccounts.map((maybeAccount) => decodeCustody(maybeAccount))
}

export function getCustodySize(): number {
  return 932
}
