/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  assertAccountExists,
  assertAccountsExist,
  combineCodec,
  decodeAccount,
  fetchEncodedAccount,
  fetchEncodedAccounts,
  fixDecoderSize,
  fixEncoderSize,
  getAddressDecoder,
  getAddressEncoder,
  getArrayDecoder,
  getArrayEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getI64Decoder,
  getI64Encoder,
  getStructDecoder,
  getStructEncoder,
  getU8Decoder,
  getU8Encoder,
  transformEncoder,
  type Account,
  type Address,
  type Codec,
  type Decoder,
  type EncodedAccount,
  type Encoder,
  type FetchAccountConfig,
  type FetchAccountsConfig,
  type MaybeAccount,
  type MaybeEncodedAccount,
  type ReadonlyUint8Array,
} from '@solana/kit'
import {
  getPermissionsDecoder,
  getPermissionsEncoder,
  type Permissions,
  type PermissionsArgs,
} from '../types'

export const PERPETUALS_DISCRIMINATOR = new Uint8Array([
  28, 167, 98, 191, 104, 82, 108, 196,
])

export function getPerpetualsDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(PERPETUALS_DISCRIMINATOR)
}

export type Perpetuals = {
  discriminator: ReadonlyUint8Array
  permissions: Permissions
  pools: Array<Address>
  admin: Address
  transferAuthorityBump: number
  perpetualsBump: number
  inceptionTime: bigint
}

export type PerpetualsArgs = {
  permissions: PermissionsArgs
  pools: Array<Address>
  admin: Address
  transferAuthorityBump: number
  perpetualsBump: number
  inceptionTime: number | bigint
}

export function getPerpetualsEncoder(): Encoder<PerpetualsArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['permissions', getPermissionsEncoder()],
      ['pools', getArrayEncoder(getAddressEncoder())],
      ['admin', getAddressEncoder()],
      ['transferAuthorityBump', getU8Encoder()],
      ['perpetualsBump', getU8Encoder()],
      ['inceptionTime', getI64Encoder()],
    ]),
    (value) => ({ ...value, discriminator: PERPETUALS_DISCRIMINATOR })
  )
}

export function getPerpetualsDecoder(): Decoder<Perpetuals> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['permissions', getPermissionsDecoder()],
    ['pools', getArrayDecoder(getAddressDecoder())],
    ['admin', getAddressDecoder()],
    ['transferAuthorityBump', getU8Decoder()],
    ['perpetualsBump', getU8Decoder()],
    ['inceptionTime', getI64Decoder()],
  ])
}

export function getPerpetualsCodec(): Codec<PerpetualsArgs, Perpetuals> {
  return combineCodec(getPerpetualsEncoder(), getPerpetualsDecoder())
}

export function decodePerpetuals<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress>
): Account<Perpetuals, TAddress>
export function decodePerpetuals<TAddress extends string = string>(
  encodedAccount: MaybeEncodedAccount<TAddress>
): MaybeAccount<Perpetuals, TAddress>
export function decodePerpetuals<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress> | MaybeEncodedAccount<TAddress>
): Account<Perpetuals, TAddress> | MaybeAccount<Perpetuals, TAddress> {
  return decodeAccount(
    encodedAccount as MaybeEncodedAccount<TAddress>,
    getPerpetualsDecoder()
  )
}

export async function fetchPerpetuals<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<Account<Perpetuals, TAddress>> {
  const maybeAccount = await fetchMaybePerpetuals(rpc, address, config)
  assertAccountExists(maybeAccount)
  return maybeAccount
}

export async function fetchMaybePerpetuals<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<MaybeAccount<Perpetuals, TAddress>> {
  const maybeAccount = await fetchEncodedAccount(rpc, address, config)
  return decodePerpetuals(maybeAccount)
}

export async function fetchAllPerpetuals(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<Account<Perpetuals>[]> {
  const maybeAccounts = await fetchAllMaybePerpetuals(rpc, addresses, config)
  assertAccountsExist(maybeAccounts)
  return maybeAccounts
}

export async function fetchAllMaybePerpetuals(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<MaybeAccount<Perpetuals>[]> {
  const maybeAccounts = await fetchEncodedAccounts(rpc, addresses, config)
  return maybeAccounts.map((maybeAccount) => decodePerpetuals(maybeAccount))
}
