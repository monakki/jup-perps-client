/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  addDecoderSizePrefix,
  addEncoderSizePrefix,
  assertAccountExists,
  assertAccountsExist,
  combineCodec,
  decodeAccount,
  fetchEncodedAccount,
  fetchEncodedAccounts,
  fixDecoderSize,
  fixEncoderSize,
  getAddressDecoder,
  getAddressEncoder,
  getArrayDecoder,
  getArrayEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getI64Decoder,
  getI64Encoder,
  getStructDecoder,
  getStructEncoder,
  getU128Decoder,
  getU128Encoder,
  getU32Decoder,
  getU32Encoder,
  getU8Decoder,
  getU8Encoder,
  getUtf8Decoder,
  getUtf8Encoder,
  transformEncoder,
  type Account,
  type Address,
  type Codec,
  type Decoder,
  type EncodedAccount,
  type Encoder,
  type FetchAccountConfig,
  type FetchAccountsConfig,
  type MaybeAccount,
  type MaybeEncodedAccount,
  type ReadonlyUint8Array,
} from '@solana/kit'
import {
  getFeesDecoder,
  getFeesEncoder,
  getLimitDecoder,
  getLimitEncoder,
  getPoolAprDecoder,
  getPoolAprEncoder,
  type Fees,
  type FeesArgs,
  type Limit,
  type LimitArgs,
  type PoolApr,
  type PoolAprArgs,
} from '../types'

export const POOL_DISCRIMINATOR = new Uint8Array([
  241, 154, 109, 4, 17, 177, 109, 188,
])

export function getPoolDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(POOL_DISCRIMINATOR)
}

export type Pool = {
  discriminator: ReadonlyUint8Array
  name: string
  custodies: Array<Address>
  aumUsd: bigint
  limit: Limit
  fees: Fees
  poolApr: PoolApr
  maxRequestExecutionSec: bigint
  bump: number
  lpTokenBump: number
  inceptionTime: bigint
}

export type PoolArgs = {
  name: string
  custodies: Array<Address>
  aumUsd: number | bigint
  limit: LimitArgs
  fees: FeesArgs
  poolApr: PoolAprArgs
  maxRequestExecutionSec: number | bigint
  bump: number
  lpTokenBump: number
  inceptionTime: number | bigint
}

export function getPoolEncoder(): Encoder<PoolArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['name', addEncoderSizePrefix(getUtf8Encoder(), getU32Encoder())],
      ['custodies', getArrayEncoder(getAddressEncoder())],
      ['aumUsd', getU128Encoder()],
      ['limit', getLimitEncoder()],
      ['fees', getFeesEncoder()],
      ['poolApr', getPoolAprEncoder()],
      ['maxRequestExecutionSec', getI64Encoder()],
      ['bump', getU8Encoder()],
      ['lpTokenBump', getU8Encoder()],
      ['inceptionTime', getI64Encoder()],
    ]),
    (value) => ({ ...value, discriminator: POOL_DISCRIMINATOR })
  )
}

export function getPoolDecoder(): Decoder<Pool> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['name', addDecoderSizePrefix(getUtf8Decoder(), getU32Decoder())],
    ['custodies', getArrayDecoder(getAddressDecoder())],
    ['aumUsd', getU128Decoder()],
    ['limit', getLimitDecoder()],
    ['fees', getFeesDecoder()],
    ['poolApr', getPoolAprDecoder()],
    ['maxRequestExecutionSec', getI64Decoder()],
    ['bump', getU8Decoder()],
    ['lpTokenBump', getU8Decoder()],
    ['inceptionTime', getI64Decoder()],
  ])
}

export function getPoolCodec(): Codec<PoolArgs, Pool> {
  return combineCodec(getPoolEncoder(), getPoolDecoder())
}

export function decodePool<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress>
): Account<Pool, TAddress>
export function decodePool<TAddress extends string = string>(
  encodedAccount: MaybeEncodedAccount<TAddress>
): MaybeAccount<Pool, TAddress>
export function decodePool<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress> | MaybeEncodedAccount<TAddress>
): Account<Pool, TAddress> | MaybeAccount<Pool, TAddress> {
  return decodeAccount(
    encodedAccount as MaybeEncodedAccount<TAddress>,
    getPoolDecoder()
  )
}

export async function fetchPool<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<Account<Pool, TAddress>> {
  const maybeAccount = await fetchMaybePool(rpc, address, config)
  assertAccountExists(maybeAccount)
  return maybeAccount
}

export async function fetchMaybePool<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<MaybeAccount<Pool, TAddress>> {
  const maybeAccount = await fetchEncodedAccount(rpc, address, config)
  return decodePool(maybeAccount)
}

export async function fetchAllPool(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<Account<Pool>[]> {
  const maybeAccounts = await fetchAllMaybePool(rpc, addresses, config)
  assertAccountsExist(maybeAccounts)
  return maybeAccounts
}

export async function fetchAllMaybePool(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<MaybeAccount<Pool>[]> {
  const maybeAccounts = await fetchEncodedAccounts(rpc, addresses, config)
  return maybeAccounts.map((maybeAccount) => decodePool(maybeAccount))
}
