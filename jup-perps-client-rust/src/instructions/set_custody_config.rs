//! This code was AUTOGENERATED using the codama library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun codama to update it.
//!
//! <https://github.com/codama-idl/codama>
//!

use crate::types::OracleParams;
use crate::types::PricingParams;
use crate::types::Permissions;
use solana_program::pubkey::Pubkey;
use crate::types::JumpRateState;
use borsh::BorshSerialize;
use borsh::BorshDeserialize;

/// Accounts.
#[derive(Debug)]
pub struct SetCustodyConfig {
      
              
          pub admin: solana_program::pubkey::Pubkey,
          
              
          pub perpetuals: solana_program::pubkey::Pubkey,
          
              
          pub custody: solana_program::pubkey::Pubkey,
      }

impl SetCustodyConfig {
  pub fn instruction(&self, args: SetCustodyConfigInstructionArgs) -> solana_program::instruction::Instruction {
    self.instruction_with_remaining_accounts(args, &[])
  }
  #[allow(clippy::arithmetic_side_effects)]
  #[allow(clippy::vec_init_then_push)]
  pub fn instruction_with_remaining_accounts(&self, args: SetCustodyConfigInstructionArgs, remaining_accounts: &[solana_program::instruction::AccountMeta]) -> solana_program::instruction::Instruction {
    let mut accounts = Vec::with_capacity(3+ remaining_accounts.len());
                            accounts.push(solana_program::instruction::AccountMeta::new(
            self.admin,
            true
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.perpetuals,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new(
            self.custody,
            false
          ));
                      accounts.extend_from_slice(remaining_accounts);
    let mut data = borsh::to_vec(&SetCustodyConfigInstructionData::new()).unwrap();
          let mut args = borsh::to_vec(&args).unwrap();
      data.append(&mut args);
    
    solana_program::instruction::Instruction {
      program_id: crate::PERPETUALS_ID,
      accounts,
      data,
    }
  }
}

#[derive(BorshSerialize, BorshDeserialize, Clone, Debug, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
 pub struct SetCustodyConfigInstructionData {
            discriminator: [u8; 8],
                                                                                                }

impl SetCustodyConfigInstructionData {
  pub fn new() -> Self {
    Self {
                        discriminator: [133, 97, 130, 143, 215, 229, 36, 176],
                                                                                                                                                                                                                                    }
  }
}

impl Default for SetCustodyConfigInstructionData {
  fn default() -> Self {
    Self::new()
  }
}

#[derive(BorshSerialize, BorshDeserialize, Clone, Debug, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
 pub struct SetCustodyConfigInstructionArgs {
                  pub oracle: OracleParams,
                pub pricing: PricingParams,
                pub permissions: Permissions,
                pub hourly_funding_dbps: u64,
                pub target_ratio_bps: u64,
                pub increase_position_bps: u64,
                pub decrease_position_bps: u64,
                pub doves_oracle: Pubkey,
                pub max_position_size_usd: u64,
                pub jump_rate: JumpRateState,
                pub price_impact_fee_factor: u64,
                pub price_impact_exponent: f32,
                pub delta_imbalance_threshold_decimal: u64,
                pub max_fee_bps: u64,
                pub doves_ag_oracle: Pubkey,
      }


/// Instruction builder for `SetCustodyConfig`.
///
/// ### Accounts:
///
                      ///   0. `[writable, signer]` admin
          ///   1. `[]` perpetuals
                ///   2. `[writable]` custody
#[derive(Clone, Debug, Default)]
pub struct SetCustodyConfigBuilder {
            admin: Option<solana_program::pubkey::Pubkey>,
                perpetuals: Option<solana_program::pubkey::Pubkey>,
                custody: Option<solana_program::pubkey::Pubkey>,
                        oracle: Option<OracleParams>,
                pricing: Option<PricingParams>,
                permissions: Option<Permissions>,
                hourly_funding_dbps: Option<u64>,
                target_ratio_bps: Option<u64>,
                increase_position_bps: Option<u64>,
                decrease_position_bps: Option<u64>,
                doves_oracle: Option<Pubkey>,
                max_position_size_usd: Option<u64>,
                jump_rate: Option<JumpRateState>,
                price_impact_fee_factor: Option<u64>,
                price_impact_exponent: Option<f32>,
                delta_imbalance_threshold_decimal: Option<u64>,
                max_fee_bps: Option<u64>,
                doves_ag_oracle: Option<Pubkey>,
        __remaining_accounts: Vec<solana_program::instruction::AccountMeta>,
}

impl SetCustodyConfigBuilder {
  pub fn new() -> Self {
    Self::default()
  }
            #[inline(always)]
    pub fn admin(&mut self, admin: solana_program::pubkey::Pubkey) -> &mut Self {
                        self.admin = Some(admin);
                    self
    }
            #[inline(always)]
    pub fn perpetuals(&mut self, perpetuals: solana_program::pubkey::Pubkey) -> &mut Self {
                        self.perpetuals = Some(perpetuals);
                    self
    }
            #[inline(always)]
    pub fn custody(&mut self, custody: solana_program::pubkey::Pubkey) -> &mut Self {
                        self.custody = Some(custody);
                    self
    }
                    #[inline(always)]
      pub fn oracle(&mut self, oracle: OracleParams) -> &mut Self {
        self.oracle = Some(oracle);
        self
      }
                #[inline(always)]
      pub fn pricing(&mut self, pricing: PricingParams) -> &mut Self {
        self.pricing = Some(pricing);
        self
      }
                #[inline(always)]
      pub fn permissions(&mut self, permissions: Permissions) -> &mut Self {
        self.permissions = Some(permissions);
        self
      }
                #[inline(always)]
      pub fn hourly_funding_dbps(&mut self, hourly_funding_dbps: u64) -> &mut Self {
        self.hourly_funding_dbps = Some(hourly_funding_dbps);
        self
      }
                #[inline(always)]
      pub fn target_ratio_bps(&mut self, target_ratio_bps: u64) -> &mut Self {
        self.target_ratio_bps = Some(target_ratio_bps);
        self
      }
                #[inline(always)]
      pub fn increase_position_bps(&mut self, increase_position_bps: u64) -> &mut Self {
        self.increase_position_bps = Some(increase_position_bps);
        self
      }
                #[inline(always)]
      pub fn decrease_position_bps(&mut self, decrease_position_bps: u64) -> &mut Self {
        self.decrease_position_bps = Some(decrease_position_bps);
        self
      }
                #[inline(always)]
      pub fn doves_oracle(&mut self, doves_oracle: Pubkey) -> &mut Self {
        self.doves_oracle = Some(doves_oracle);
        self
      }
                #[inline(always)]
      pub fn max_position_size_usd(&mut self, max_position_size_usd: u64) -> &mut Self {
        self.max_position_size_usd = Some(max_position_size_usd);
        self
      }
                #[inline(always)]
      pub fn jump_rate(&mut self, jump_rate: JumpRateState) -> &mut Self {
        self.jump_rate = Some(jump_rate);
        self
      }
                #[inline(always)]
      pub fn price_impact_fee_factor(&mut self, price_impact_fee_factor: u64) -> &mut Self {
        self.price_impact_fee_factor = Some(price_impact_fee_factor);
        self
      }
                #[inline(always)]
      pub fn price_impact_exponent(&mut self, price_impact_exponent: f32) -> &mut Self {
        self.price_impact_exponent = Some(price_impact_exponent);
        self
      }
                #[inline(always)]
      pub fn delta_imbalance_threshold_decimal(&mut self, delta_imbalance_threshold_decimal: u64) -> &mut Self {
        self.delta_imbalance_threshold_decimal = Some(delta_imbalance_threshold_decimal);
        self
      }
                #[inline(always)]
      pub fn max_fee_bps(&mut self, max_fee_bps: u64) -> &mut Self {
        self.max_fee_bps = Some(max_fee_bps);
        self
      }
                #[inline(always)]
      pub fn doves_ag_oracle(&mut self, doves_ag_oracle: Pubkey) -> &mut Self {
        self.doves_ag_oracle = Some(doves_ag_oracle);
        self
      }
        /// Add an additional account to the instruction.
  #[inline(always)]
  pub fn add_remaining_account(&mut self, account: solana_program::instruction::AccountMeta) -> &mut Self {
    self.__remaining_accounts.push(account);
    self
  }
  /// Add additional accounts to the instruction.
  #[inline(always)]
  pub fn add_remaining_accounts(&mut self, accounts: &[solana_program::instruction::AccountMeta]) -> &mut Self {
    self.__remaining_accounts.extend_from_slice(accounts);
    self
  }
  #[allow(clippy::clone_on_copy)]
  pub fn instruction(&self) -> solana_program::instruction::Instruction {
    let accounts = SetCustodyConfig {
                              admin: self.admin.expect("admin is not set"),
                                        perpetuals: self.perpetuals.expect("perpetuals is not set"),
                                        custody: self.custody.expect("custody is not set"),
                      };
          let args = SetCustodyConfigInstructionArgs {
                                                              oracle: self.oracle.clone().expect("oracle is not set"),
                                                                  pricing: self.pricing.clone().expect("pricing is not set"),
                                                                  permissions: self.permissions.clone().expect("permissions is not set"),
                                                                  hourly_funding_dbps: self.hourly_funding_dbps.clone().expect("hourly_funding_dbps is not set"),
                                                                  target_ratio_bps: self.target_ratio_bps.clone().expect("target_ratio_bps is not set"),
                                                                  increase_position_bps: self.increase_position_bps.clone().expect("increase_position_bps is not set"),
                                                                  decrease_position_bps: self.decrease_position_bps.clone().expect("decrease_position_bps is not set"),
                                                                  doves_oracle: self.doves_oracle.clone().expect("doves_oracle is not set"),
                                                                  max_position_size_usd: self.max_position_size_usd.clone().expect("max_position_size_usd is not set"),
                                                                  jump_rate: self.jump_rate.clone().expect("jump_rate is not set"),
                                                                  price_impact_fee_factor: self.price_impact_fee_factor.clone().expect("price_impact_fee_factor is not set"),
                                                                  price_impact_exponent: self.price_impact_exponent.clone().expect("price_impact_exponent is not set"),
                                                                  delta_imbalance_threshold_decimal: self.delta_imbalance_threshold_decimal.clone().expect("delta_imbalance_threshold_decimal is not set"),
                                                                  max_fee_bps: self.max_fee_bps.clone().expect("max_fee_bps is not set"),
                                                                  doves_ag_oracle: self.doves_ag_oracle.clone().expect("doves_ag_oracle is not set"),
                                    };
    
    accounts.instruction_with_remaining_accounts(args, &self.__remaining_accounts)
  }
}

  /// `set_custody_config` CPI accounts.
  pub struct SetCustodyConfigCpiAccounts<'a, 'b> {
          
                    
              pub admin: &'b solana_program::account_info::AccountInfo<'a>,
                
                    
              pub perpetuals: &'b solana_program::account_info::AccountInfo<'a>,
                
                    
              pub custody: &'b solana_program::account_info::AccountInfo<'a>,
            }

/// `set_custody_config` CPI instruction.
pub struct SetCustodyConfigCpi<'a, 'b> {
  /// The program to invoke.
  pub __program: &'b solana_program::account_info::AccountInfo<'a>,
      
              
          pub admin: &'b solana_program::account_info::AccountInfo<'a>,
          
              
          pub perpetuals: &'b solana_program::account_info::AccountInfo<'a>,
          
              
          pub custody: &'b solana_program::account_info::AccountInfo<'a>,
            /// The arguments for the instruction.
    pub __args: SetCustodyConfigInstructionArgs,
  }

impl<'a, 'b> SetCustodyConfigCpi<'a, 'b> {
  pub fn new(
    program: &'b solana_program::account_info::AccountInfo<'a>,
          accounts: SetCustodyConfigCpiAccounts<'a, 'b>,
              args: SetCustodyConfigInstructionArgs,
      ) -> Self {
    Self {
      __program: program,
              admin: accounts.admin,
              perpetuals: accounts.perpetuals,
              custody: accounts.custody,
                    __args: args,
          }
  }
  #[inline(always)]
  pub fn invoke(&self) -> solana_program::entrypoint::ProgramResult {
    self.invoke_signed_with_remaining_accounts(&[], &[])
  }
  #[inline(always)]
  pub fn invoke_with_remaining_accounts(&self, remaining_accounts: &[(&'b solana_program::account_info::AccountInfo<'a>, bool, bool)]) -> solana_program::entrypoint::ProgramResult {
    self.invoke_signed_with_remaining_accounts(&[], remaining_accounts)
  }
  #[inline(always)]
  pub fn invoke_signed(&self, signers_seeds: &[&[&[u8]]]) -> solana_program::entrypoint::ProgramResult {
    self.invoke_signed_with_remaining_accounts(signers_seeds, &[])
  }
  #[allow(clippy::arithmetic_side_effects)]
  #[allow(clippy::clone_on_copy)]
  #[allow(clippy::vec_init_then_push)]
  pub fn invoke_signed_with_remaining_accounts(
    &self,
    signers_seeds: &[&[&[u8]]],
    remaining_accounts: &[(&'b solana_program::account_info::AccountInfo<'a>, bool, bool)]
  ) -> solana_program::entrypoint::ProgramResult {
    let mut accounts = Vec::with_capacity(3+ remaining_accounts.len());
                            accounts.push(solana_program::instruction::AccountMeta::new(
            *self.admin.key,
            true
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.perpetuals.key,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new(
            *self.custody.key,
            false
          ));
                      remaining_accounts.iter().for_each(|remaining_account| {
      accounts.push(solana_program::instruction::AccountMeta {
          pubkey: *remaining_account.0.key,
          is_signer: remaining_account.1,
          is_writable: remaining_account.2,
      })
    });
    let mut data = borsh::to_vec(&SetCustodyConfigInstructionData::new()).unwrap();
          let mut args = borsh::to_vec(&self.__args).unwrap();
      data.append(&mut args);
    
    let instruction = solana_program::instruction::Instruction {
      program_id: crate::PERPETUALS_ID,
      accounts,
      data,
    };
    let mut account_infos = Vec::with_capacity(4 + remaining_accounts.len());
    account_infos.push(self.__program.clone());
                  account_infos.push(self.admin.clone());
                        account_infos.push(self.perpetuals.clone());
                        account_infos.push(self.custody.clone());
              remaining_accounts.iter().for_each(|remaining_account| account_infos.push(remaining_account.0.clone()));

    if signers_seeds.is_empty() {
      solana_program::program::invoke(&instruction, &account_infos)
    } else {
      solana_program::program::invoke_signed(&instruction, &account_infos, signers_seeds)
    }
  }
}

/// Instruction builder for `SetCustodyConfig` via CPI.
///
/// ### Accounts:
///
                      ///   0. `[writable, signer]` admin
          ///   1. `[]` perpetuals
                ///   2. `[writable]` custody
#[derive(Clone, Debug)]
pub struct SetCustodyConfigCpiBuilder<'a, 'b> {
  instruction: Box<SetCustodyConfigCpiBuilderInstruction<'a, 'b>>,
}

impl<'a, 'b> SetCustodyConfigCpiBuilder<'a, 'b> {
  pub fn new(program: &'b solana_program::account_info::AccountInfo<'a>) -> Self {
    let instruction = Box::new(SetCustodyConfigCpiBuilderInstruction {
      __program: program,
              admin: None,
              perpetuals: None,
              custody: None,
                                            oracle: None,
                                pricing: None,
                                permissions: None,
                                hourly_funding_dbps: None,
                                target_ratio_bps: None,
                                increase_position_bps: None,
                                decrease_position_bps: None,
                                doves_oracle: None,
                                max_position_size_usd: None,
                                jump_rate: None,
                                price_impact_fee_factor: None,
                                price_impact_exponent: None,
                                delta_imbalance_threshold_decimal: None,
                                max_fee_bps: None,
                                doves_ag_oracle: None,
                    __remaining_accounts: Vec::new(),
    });
    Self { instruction }
  }
      #[inline(always)]
    pub fn admin(&mut self, admin: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.admin = Some(admin);
                    self
    }
      #[inline(always)]
    pub fn perpetuals(&mut self, perpetuals: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.perpetuals = Some(perpetuals);
                    self
    }
      #[inline(always)]
    pub fn custody(&mut self, custody: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.custody = Some(custody);
                    self
    }
                    #[inline(always)]
      pub fn oracle(&mut self, oracle: OracleParams) -> &mut Self {
        self.instruction.oracle = Some(oracle);
        self
      }
                #[inline(always)]
      pub fn pricing(&mut self, pricing: PricingParams) -> &mut Self {
        self.instruction.pricing = Some(pricing);
        self
      }
                #[inline(always)]
      pub fn permissions(&mut self, permissions: Permissions) -> &mut Self {
        self.instruction.permissions = Some(permissions);
        self
      }
                #[inline(always)]
      pub fn hourly_funding_dbps(&mut self, hourly_funding_dbps: u64) -> &mut Self {
        self.instruction.hourly_funding_dbps = Some(hourly_funding_dbps);
        self
      }
                #[inline(always)]
      pub fn target_ratio_bps(&mut self, target_ratio_bps: u64) -> &mut Self {
        self.instruction.target_ratio_bps = Some(target_ratio_bps);
        self
      }
                #[inline(always)]
      pub fn increase_position_bps(&mut self, increase_position_bps: u64) -> &mut Self {
        self.instruction.increase_position_bps = Some(increase_position_bps);
        self
      }
                #[inline(always)]
      pub fn decrease_position_bps(&mut self, decrease_position_bps: u64) -> &mut Self {
        self.instruction.decrease_position_bps = Some(decrease_position_bps);
        self
      }
                #[inline(always)]
      pub fn doves_oracle(&mut self, doves_oracle: Pubkey) -> &mut Self {
        self.instruction.doves_oracle = Some(doves_oracle);
        self
      }
                #[inline(always)]
      pub fn max_position_size_usd(&mut self, max_position_size_usd: u64) -> &mut Self {
        self.instruction.max_position_size_usd = Some(max_position_size_usd);
        self
      }
                #[inline(always)]
      pub fn jump_rate(&mut self, jump_rate: JumpRateState) -> &mut Self {
        self.instruction.jump_rate = Some(jump_rate);
        self
      }
                #[inline(always)]
      pub fn price_impact_fee_factor(&mut self, price_impact_fee_factor: u64) -> &mut Self {
        self.instruction.price_impact_fee_factor = Some(price_impact_fee_factor);
        self
      }
                #[inline(always)]
      pub fn price_impact_exponent(&mut self, price_impact_exponent: f32) -> &mut Self {
        self.instruction.price_impact_exponent = Some(price_impact_exponent);
        self
      }
                #[inline(always)]
      pub fn delta_imbalance_threshold_decimal(&mut self, delta_imbalance_threshold_decimal: u64) -> &mut Self {
        self.instruction.delta_imbalance_threshold_decimal = Some(delta_imbalance_threshold_decimal);
        self
      }
                #[inline(always)]
      pub fn max_fee_bps(&mut self, max_fee_bps: u64) -> &mut Self {
        self.instruction.max_fee_bps = Some(max_fee_bps);
        self
      }
                #[inline(always)]
      pub fn doves_ag_oracle(&mut self, doves_ag_oracle: Pubkey) -> &mut Self {
        self.instruction.doves_ag_oracle = Some(doves_ag_oracle);
        self
      }
        /// Add an additional account to the instruction.
  #[inline(always)]
  pub fn add_remaining_account(&mut self, account: &'b solana_program::account_info::AccountInfo<'a>, is_writable: bool, is_signer: bool) -> &mut Self {
    self.instruction.__remaining_accounts.push((account, is_writable, is_signer));
    self
  }
  /// Add additional accounts to the instruction.
  ///
  /// Each account is represented by a tuple of the `AccountInfo`, a `bool` indicating whether the account is writable or not,
  /// and a `bool` indicating whether the account is a signer or not.
  #[inline(always)]
  pub fn add_remaining_accounts(&mut self, accounts: &[(&'b solana_program::account_info::AccountInfo<'a>, bool, bool)]) -> &mut Self {
    self.instruction.__remaining_accounts.extend_from_slice(accounts);
    self
  }
  #[inline(always)]
  pub fn invoke(&self) -> solana_program::entrypoint::ProgramResult {
    self.invoke_signed(&[])
  }
  #[allow(clippy::clone_on_copy)]
  #[allow(clippy::vec_init_then_push)]
  pub fn invoke_signed(&self, signers_seeds: &[&[&[u8]]]) -> solana_program::entrypoint::ProgramResult {
          let args = SetCustodyConfigInstructionArgs {
                                                              oracle: self.instruction.oracle.clone().expect("oracle is not set"),
                                                                  pricing: self.instruction.pricing.clone().expect("pricing is not set"),
                                                                  permissions: self.instruction.permissions.clone().expect("permissions is not set"),
                                                                  hourly_funding_dbps: self.instruction.hourly_funding_dbps.clone().expect("hourly_funding_dbps is not set"),
                                                                  target_ratio_bps: self.instruction.target_ratio_bps.clone().expect("target_ratio_bps is not set"),
                                                                  increase_position_bps: self.instruction.increase_position_bps.clone().expect("increase_position_bps is not set"),
                                                                  decrease_position_bps: self.instruction.decrease_position_bps.clone().expect("decrease_position_bps is not set"),
                                                                  doves_oracle: self.instruction.doves_oracle.clone().expect("doves_oracle is not set"),
                                                                  max_position_size_usd: self.instruction.max_position_size_usd.clone().expect("max_position_size_usd is not set"),
                                                                  jump_rate: self.instruction.jump_rate.clone().expect("jump_rate is not set"),
                                                                  price_impact_fee_factor: self.instruction.price_impact_fee_factor.clone().expect("price_impact_fee_factor is not set"),
                                                                  price_impact_exponent: self.instruction.price_impact_exponent.clone().expect("price_impact_exponent is not set"),
                                                                  delta_imbalance_threshold_decimal: self.instruction.delta_imbalance_threshold_decimal.clone().expect("delta_imbalance_threshold_decimal is not set"),
                                                                  max_fee_bps: self.instruction.max_fee_bps.clone().expect("max_fee_bps is not set"),
                                                                  doves_ag_oracle: self.instruction.doves_ag_oracle.clone().expect("doves_ag_oracle is not set"),
                                    };
        let instruction = SetCustodyConfigCpi {
        __program: self.instruction.__program,
                  
          admin: self.instruction.admin.expect("admin is not set"),
                  
          perpetuals: self.instruction.perpetuals.expect("perpetuals is not set"),
                  
          custody: self.instruction.custody.expect("custody is not set"),
                          __args: args,
            };
    instruction.invoke_signed_with_remaining_accounts(signers_seeds, &self.instruction.__remaining_accounts)
  }
}

#[derive(Clone, Debug)]
struct SetCustodyConfigCpiBuilderInstruction<'a, 'b> {
  __program: &'b solana_program::account_info::AccountInfo<'a>,
            admin: Option<&'b solana_program::account_info::AccountInfo<'a>>,
                perpetuals: Option<&'b solana_program::account_info::AccountInfo<'a>>,
                custody: Option<&'b solana_program::account_info::AccountInfo<'a>>,
                        oracle: Option<OracleParams>,
                pricing: Option<PricingParams>,
                permissions: Option<Permissions>,
                hourly_funding_dbps: Option<u64>,
                target_ratio_bps: Option<u64>,
                increase_position_bps: Option<u64>,
                decrease_position_bps: Option<u64>,
                doves_oracle: Option<Pubkey>,
                max_position_size_usd: Option<u64>,
                jump_rate: Option<JumpRateState>,
                price_impact_fee_factor: Option<u64>,
                price_impact_exponent: Option<f32>,
                delta_imbalance_threshold_decimal: Option<u64>,
                max_fee_bps: Option<u64>,
                doves_ag_oracle: Option<Pubkey>,
        /// Additional instruction accounts `(AccountInfo, is_writable, is_signer)`.
  __remaining_accounts: Vec<(&'b solana_program::account_info::AccountInfo<'a>, bool, bool)>,
}

