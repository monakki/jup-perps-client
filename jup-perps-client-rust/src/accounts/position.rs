//! This code was AUTOGENERATED using the codama library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun codama to update it.
//!
//! <https://github.com/codama-idl/codama>
//!

use solana_program::pubkey::Pubkey;
use crate::types::Side;
use borsh::BorshSerialize;
use borsh::BorshDeserialize;


#[derive(BorshSerialize, BorshDeserialize, Clone, Debug, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
/// Individual trader position with size, collateral, and P&L data
pub struct Position {
pub discriminator: [u8; 8],
#[cfg_attr(feature = "serde", serde(with = "serde_with::As::<serde_with::DisplayFromStr>"))]
pub owner: Pubkey,
#[cfg_attr(feature = "serde", serde(with = "serde_with::As::<serde_with::DisplayFromStr>"))]
pub pool: Pubkey,
#[cfg_attr(feature = "serde", serde(with = "serde_with::As::<serde_with::DisplayFromStr>"))]
pub custody: Pubkey,
#[cfg_attr(feature = "serde", serde(with = "serde_with::As::<serde_with::DisplayFromStr>"))]
pub collateral_custody: Pubkey,
pub open_time: i64,
pub update_time: i64,
pub side: Side,
pub price: u64,
pub size_usd: u64,
pub collateral_usd: u64,
pub realised_pnl_usd: i64,
pub cumulative_interest_snapshot: u128,
pub locked_amount: u64,
pub bump: u8,
}


impl Position {
      pub const LEN: usize = 210;
  
  
  
  #[inline(always)]
  /// Deserializes account data from raw bytes
/// 
/// # Arguments
/// * `rpc` - Solana RPC client
/// * `address` - Account address to fetch
/// 
/// # Returns
/// * `Result<T, std::io::Error>` - Decoded account data or error
pub fn from_bytes(data: &[u8]) -> Result<Self, std::io::Error> {
    let mut data = data;
    Self::deserialize(&mut data)
  }
}

impl<'a> TryFrom<&solana_program::account_info::AccountInfo<'a>> for Position {
  type Error = std::io::Error;

  fn try_from(account_info: &solana_program::account_info::AccountInfo<'a>) -> Result<Self, Self::Error> {
      let mut data: &[u8] = &(*account_info.data).borrow();
      Self::deserialize(&mut data)
  }
}

#[cfg(feature = "fetch")]
/// Fetches trader position data
/// 
/// # Arguments
/// * `rpc` - Solana RPC client
/// * `address` - Account address to fetch
/// 
/// # Returns
/// * `Result<T, std::io::Error>` - Decoded account data or error
pub fn fetch_position(
  rpc: &solana_client::rpc_client::RpcClient,
  address: &solana_program::pubkey::Pubkey,
) -> Result<crate::shared::DecodedAccount<Position>, std::io::Error> {
  let accounts = fetch_all_position(rpc, &[*address])?;
  Ok(accounts[0].clone())
}

#[cfg(feature = "fetch")]
/// Fetches multiple position accounts in batch
/// 
/// # Arguments
/// * `rpc` - Solana RPC client
/// * `address` - Account address to fetch
/// 
/// # Returns
/// * `Result<T, std::io::Error>` - Decoded account data or error
pub fn fetch_all_position(
  rpc: &solana_client::rpc_client::RpcClient,
  addresses: &[solana_program::pubkey::Pubkey],
) -> Result<Vec<crate::shared::DecodedAccount<Position>>, std::io::Error> {
    let accounts = rpc.get_multiple_accounts(addresses)
      .map_err(|e| std::io::Error::new(std::io::ErrorKind::Other, e.to_string()))?;
    let mut decoded_accounts: Vec<crate::shared::DecodedAccount<Position>> = Vec::new();
    for i in 0..addresses.len() {
      let address = addresses[i];
      let account = accounts[i].as_ref()
        .ok_or(std::io::Error::new(std::io::ErrorKind::Other, format!("Account not found: {}", address)))?;
      let data = Position::from_bytes(&account.data)?;
      decoded_accounts.push(crate::shared::DecodedAccount { address, account: account.clone(), data });
    }
    Ok(decoded_accounts)
}

#[cfg(feature = "fetch")]
/// Safely fetches position data (returns None if not found)
/// 
/// # Arguments
/// * `rpc` - Solana RPC client
/// * `address` - Account address to fetch
/// 
/// # Returns
/// * `Result<T, std::io::Error>` - Decoded account data or error
pub fn fetch_maybe_position(
  rpc: &solana_client::rpc_client::RpcClient,
  address: &solana_program::pubkey::Pubkey,
) -> Result<crate::shared::MaybeAccount<Position>, std::io::Error> {
    let accounts = fetch_all_maybe_position(rpc, &[*address])?;
    Ok(accounts[0].clone())
}

#[cfg(feature = "fetch")]
pub fn fetch_all_maybe_position(
  rpc: &solana_client::rpc_client::RpcClient,
  addresses: &[solana_program::pubkey::Pubkey],
) -> Result<Vec<crate::shared::MaybeAccount<Position>>, std::io::Error> {
    let accounts = rpc.get_multiple_accounts(addresses)
      .map_err(|e| std::io::Error::new(std::io::ErrorKind::Other, e.to_string()))?;
    let mut decoded_accounts: Vec<crate::shared::MaybeAccount<Position>> = Vec::new();
    for i in 0..addresses.len() {
      let address = addresses[i];
      if let Some(account) = accounts[i].as_ref() {
        let data = Position::from_bytes(&account.data)?;
        decoded_accounts.push(crate::shared::MaybeAccount::Exists(crate::shared::DecodedAccount { address, account: account.clone(), data }));
      } else {
        decoded_accounts.push(crate::shared::MaybeAccount::NotFound(address));
      }
    }
  Ok(decoded_accounts)
}


